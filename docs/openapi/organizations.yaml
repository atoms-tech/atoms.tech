openapi: 3.0.3
info:
    title: Atoms API - Organizations
    version: 1.0.0
servers:
    - url: https://api.example.com
paths:
    /orgs:
        get:
            summary: List organizations for user
            parameters:
                - in: query
                  name: userId
                  required: true
                  schema: { type: string }
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items: { $ref: '#/components/schemas/Organization' }
        post:
            summary: Create organization
            requestBody:
                required: true
                content:
                    application/json:
                        schema: { $ref: '#/components/schemas/OrganizationCreate' }
            responses:
                '201': { description: Created }
    /orgs/{id}:
        get:
            summary: Get organization by id
            parameters:
                - in: path
                  name: id
                  required: true
                  schema: { type: string }
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema: { $ref: '#/components/schemas/Organization' }
    /orgs/{id}/members:
        get:
            summary: List Org members
            parameters:
                - in: path
                  name: id
                  required: true
                  schema: { type: string }
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items: { $ref: '#/components/schemas/OrganizationMember' }
        post:
            summary: Add member
            parameters:
                - in: path
                  name: id
                  required: true
                  schema: { type: string }
            requestBody:
                required: true
                content:
                    application/json:
                        schema: { $ref: '#/components/schemas/OrganizationMemberCreate' }
            responses:
                '201': { description: Created }
    /orgs/{id}/members/{userId}:
        patch:
            summary: Set member role
            parameters:
                - in: path
                  name: id
                  required: true
                  schema: { type: string }
                - in: path
                  name: userId
                  required: true
                  schema: { type: string }
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                role: { type: string, enum: [owner, admin, member] }
            responses:
                '204': { description: No Content }
        delete:
            summary: Remove member
            parameters:
                - in: path
                  name: id
                  required: true
                  schema: { type: string }
                - in: path
                  name: userId
                  required: true
                  schema: { type: string }
            responses:
                '204': { description: No Content }
components:
    schemas:
        Organization:
            type: object
            properties:
                id: { type: string }
                name: { type: string }
                slug: { type: string }
                type: { type: string, enum: [personal, team, enterprise] }
                member_count: { type: integer }
                metadata: { type: object, additionalProperties: true, nullable: true }
        OrganizationCreate:
            type: object
            required: [name, slug]
            properties:
                name: { type: string }
                slug: { type: string }
                type: { type: string, enum: [personal, team, enterprise], default: team }
                metadata: { type: object, additionalProperties: true }
        OrganizationMember:
            type: object
            properties:
                organization_id: { type: string }
                user_id: { type: string }
                role: { type: string, enum: [owner, admin, member] }
                status: { type: string, enum: [active, invited] }
        OrganizationMemberCreate:
            type: object
            required: [user_id, role]
            properties:
                user_id: { type: string }
                role: { type: string, enum: [owner, admin, member] }
                status: { type: string, enum: [active, invited], default: active }
