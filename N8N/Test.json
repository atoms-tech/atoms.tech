{
    "nodes": [
      {
        "parameters": {
          "useCustomSchema": true,
          "operation": "get",
          "tableId": "projects",
          "filters": {
            "conditions": [
              {
                "keyName": "organization_id",
                "keyValue": "=f747dd98-e326-4ca8-95b2-43530ea9887a"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          -80,
          240
        ],
        "id": "79a1ef91-2c45-416d-a00a-150ba33b0db9",
        "name": "Pull Org Project Lists",
        "alwaysOutputData": true,
        "credentials": {
          "supabaseApi": {
            "id": "4T7K0ALnwHMmf2mr",
            "name": "Supabase account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Extract the 'name' values from the input\nconst names = $input.all().map(item => item.json.name);\n\n// Extract the 'id' values from the input\nconst ids = $input.all().map(item => item.json.id);\n\nconst description = $input.all().map(item => item.json.description);\n\n\nreturn [\n  {\n    json: {\n      project_ids: ids,\n      project_names: names,\n      project_descriptions: description,\n      message: $('project_overview').first().json.query\n    }\n  }\n];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          60,
          360
        ],
        "id": "ab03fe2b-aeef-43ef-87d1-e688f74f3dd8",
        "name": "Extract Project's ids",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=**project_ids**: {{ $('Extract Project\\'s ids').item.json.project_ids }}\n\n**project_names**: {{ $('Extract Project\\'s ids').item.json.project_names }}\n\n**project_descriptions**: {{ $('Extract Project\\'s ids').item.json.project_descriptions }}\n\n**user's message**: {{ $('Extract Project\\'s ids').item.json.message }}",
          "hasOutputParser": true,
          "options": {
            "systemMessage": "=# 🔧 System Prompt\n\nThe data contains three key components:\n\n- **`project_ids`**: A list of unique identifiers for each project. Each project is assigned a unique ID for identification.\n- **`project_names`**: A list of names corresponding to each project. Each project has a name that can be used to identify it more easily.\n- **`project_descriptions`**: A list of descriptions corresponding to each project. These descriptions provide additional details or context about each project. Note that some descriptions may be null, indicating that no description is available for that project.\n\nEach of these lists corresponds to each other in a 1-to-1 relationship. That means:\n\n- The first `project_id` corresponds to the first `project_name` and the first `project_description`.\n- The second `project_id` corresponds to the second `project_name` and the second `project_description`.\n- And so on...\n\n---\n\n## ✅ Your Task\n\nBased on the user's goal, you need to:\n\n1. **Review** the `project_names` and `project_descriptions` provided above.\n2. **Understand** the user's goal or requirements.\n3. **Identify** the most relevant projects by matching their names and descriptions with the user's intent.\n\n---\n\n## 🎯 Selection Rule\n\n- If the user wants to **review all project requirements**,  \n  → **Return all `project_ids`**.\n\n- If the user is interested in **only specific projects**,  \n  → **Return only the `project_ids`** that best match the user's needs.\n\n---\n\n## 🔁 Output Format\n\nReturn the selected `project_ids` as a **list**.\n"
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          220,
          460
        ],
        "id": "5d4133e8-1587-4f56-b90b-5c1b38dd848b",
        "name": "Agent Checked DB",
        "alwaysOutputData": true,
        "executeOnce": true,
        "retryOnFail": true,
        "maxTries": 5
      },
      {
        "parameters": {
          "fieldToSplitOut": "id, document_id, type, content.text, position",
          "options": {}
        },
        "type": "n8n-nodes-base.splitOut",
        "typeVersion": 1,
        "position": [
          2200,
          360
        ],
        "id": "74408672-2b9d-4d1b-8d88-5b3275a51564",
        "name": "Split Out - ids,context.text",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "jsonSchemaExample": "[\n  {\n  \t\"target_project_ids\": \"adsfadgadsg1\"\n  }\n]"
        },
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "typeVersion": 1.2,
        "position": [
          380,
          640
        ],
        "id": "23440486-84e5-4852-a6cc-a58b23d7e6cc",
        "name": "Structured Output Parser",
        "notesInFlow": true
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items\nlet result = [];\n\n// Loop through all items\nfor (const item of $input.all()) {\n  // Ensure 'output' exists and is an array\n  if (item.json.output && Array.isArray(item.json.output)) {\n    // Extract target_project_ids from the output array\n    const targetProjectIds = item.json.output.map(o => ({ target_project_ids: o.target_project_ids }));\n    \n    // Add the extracted target_project_ids to the result\n    result = result.concat(targetProjectIds);\n  }\n}\n\n// Return the transformed result\nreturn result;\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          540,
          580
        ],
        "id": "3c6e432f-e7a3-411e-9f5c-a536e06d6ac2",
        "name": "extract target_project_ids"
      },
      {
        "parameters": {
          "modelName": "models/gemini-2.5-pro",
          "options": {
            "maxOutputTokens": 2048,
            "temperature": 0.3,
            "topP": 0.9
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          240,
          640
        ],
        "id": "918fe232-1052-44df-975c-10238352f465",
        "name": "gemini 2.5 pro",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "e22d2a1a-2357-4295-b8a3-e98af8de00fe",
                "name": "id",
                "value": "={{ $json.project_id }}",
                "type": "string"
              },
              {
                "id": "374b3c56-146c-4d41-8923-47cd78aa624d",
                "name": "document_name",
                "value": "={{ $json.name }}",
                "type": "string"
              },
              {
                "id": "f024475c-e2f7-49fe-ab60-7d9ccb0f300b",
                "name": "document_id",
                "value": "={{ $json.id }}",
                "type": "string"
              },
              {
                "id": "7644cd10-9229-4ef2-83f8-b7c0341dbe94",
                "name": "document_description",
                "value": "={{ $json.description }}",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          860,
          680
        ],
        "id": "996a949f-2cd6-4976-a9d0-d0a2ed84b014",
        "name": "set_document_id,name,description",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "operation": "getAll",
          "tableId": "requirements",
          "returnAll": true,
          "filters": {
            "conditions": [
              {
                "keyName": "document_id",
                "condition": "eq",
                "keyValue": "={{ $json.target_document_ids }}"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          2000,
          760
        ],
        "id": "1255991a-d358-42f7-afef-71fc6fc71c13",
        "name": "Get Tables",
        "alwaysOutputData": true,
        "executeOnce": false,
        "credentials": {
          "supabaseApi": {
            "id": "4T7K0ALnwHMmf2mr",
            "name": "Supabase account"
          }
        }
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "4cee4b3d-7867-463c-803e-dcbb8bef339c",
                "name": "block_id",
                "value": "={{ $json.id }}",
                "type": "string"
              },
              {
                "id": "3f5f3bb8-ba8e-47ed-b07e-562320f79b31",
                "name": "document_id",
                "value": "={{ $json.document_id }}",
                "type": "string"
              },
              {
                "id": "62e1219a-50ef-4850-ab57-70758b8575f9",
                "name": "type",
                "value": "={{ $json.type }}",
                "type": "string"
              },
              {
                "id": "2de34743-9737-4420-9ce3-a1259c221d26",
                "name": "content.text",
                "value": "={{ $json[\"content.text\"] }}",
                "type": "string"
              },
              {
                "id": "e85ca3c6-7f33-46c6-bb28-c159a1fceda7",
                "name": "position",
                "value": "={{ $json.position }}",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          2360,
          320
        ],
        "id": "0791c536-32b7-4d25-9d8b-cf24751bbf89",
        "name": "Set params from blocks",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "jsCode": "const keysToRemove = [\n  \"format\",\n  \"level\",\n  \"tags\",\n  \"position\",\n  \"type\",\n  \"original_requirement\",\n  \"enchanced_requirement\",\n  \"ai_analysis\",\n  \"created_at\",\n  \"updated_at\",\n  \"created_by\",\n  \"updated_by\",\n  \"version\",\n  \"is_deleted\",\n  \"deleted_at\",\n  \"deleted_by\",\n  \"properties\",\n];\n\nfor (const item of $input.all()) {\n  if (item.json && typeof item.json === 'object') {\n    if (item.json.properties && item.json.properties.Email && item.json.properties.Email.value) {\n      item.json.email = item.json.properties.Email.value;\n    }\n    \n    for (const key of keysToRemove) {\n      delete item.json[key];\n    }\n  }\n}\n\nreturn $input.all();"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          2140,
          820
        ],
        "id": "48bce1fc-a05d-4b43-a6a0-8686c2f9be36",
        "name": "Refine param from Table",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "mode": "combine",
          "fieldsToMatchString": "id",
          "options": {}
        },
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.2,
        "position": [
          980,
          460
        ],
        "id": "961bb25f-0545-4a1d-af43-cdb956f88d48",
        "name": "Merge: Project + documents"
      },
      {
        "parameters": {
          "operation": "getAll",
          "tableId": "blocks",
          "returnAll": true,
          "filters": {
            "conditions": [
              {
                "keyName": "document_id",
                "condition": "eq",
                "keyValue": "={{ $json.target_document_ids }}"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          2020,
          420
        ],
        "id": "6bbf7302-d679-4364-abc1-40d52f7d6806",
        "name": "blocks & text_from_document_ids",
        "executeOnce": false,
        "alwaysOutputData": true,
        "credentials": {
          "supabaseApi": {
            "id": "4T7K0ALnwHMmf2mr",
            "name": "Supabase account"
          }
        }
      },
      {
        "parameters": {
          "content": "# 1. Selecting the projects to be reviewed based on the user's request\n",
          "height": 1080,
          "width": 940
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          -260,
          0
        ],
        "typeVersion": 1,
        "id": "eed63d1f-6801-4ad7-9e0b-2ea4abb14cf9",
        "name": "Sticky Note"
      },
      {
        "parameters": {
          "useCustomSchema": true,
          "operation": "getAll",
          "tableId": "documents",
          "returnAll": true,
          "filters": {
            "conditions": [
              {
                "keyName": "project_id",
                "condition": "eq",
                "keyValue": "={{ $json.target_project_ids }}"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          700,
          460
        ],
        "id": "8ab26bfd-163e-4c4b-afc2-330517f1848d",
        "name": "Get Documents from Selected Project",
        "alwaysOutputData": true,
        "credentials": {
          "supabaseApi": {
            "id": "4T7K0ALnwHMmf2mr",
            "name": "Supabase account"
          }
        }
      },
      {
        "parameters": {
          "content": "# 2. Sorting the Project IDs selected by AI based on the user's request, along with their corresponding requirement fields in order.\n",
          "height": 1080,
          "width": 720,
          "color": 3
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          680,
          0
        ],
        "typeVersion": 1,
        "id": "dceceb9a-1e54-4294-9bb8-ba85d170be6e",
        "name": "Sticky Note1"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "2fb9f1c1-ddd0-4ef1-a4b8-a321d67925a4",
                "name": "organization_id",
                "value": "={{ $json.organization_id }}",
                "type": "string"
              },
              {
                "id": "3eb43469-7f53-4c5c-941b-a8f2f265cd9d",
                "name": "project_id",
                "value": "={{ $json.id }}",
                "type": "string"
              },
              {
                "id": "6f784a3e-308c-401e-9f71-192f407a38da",
                "name": "project_name",
                "value": "={{ $json.name }}",
                "type": "string"
              },
              {
                "id": "9668c1af-8417-40d6-9c71-dfe911841ab7",
                "name": "project_description",
                "value": "={{ $json.description }}",
                "type": "string"
              },
              {
                "id": "087bc4f9-9bee-4c85-bae8-b8f1b85d6889",
                "name": "document_id",
                "value": "={{ $json.document_id }}",
                "type": "string"
              },
              {
                "id": "81d90925-a035-4579-a7d3-40391c906098",
                "name": "document_name",
                "value": "={{ $json.document_name }}",
                "type": "string"
              },
              {
                "id": "1cefe88a-d741-4cc5-a6e1-51e9ce0aba3d",
                "name": "document_description",
                "value": "={{ $json.document_description }}",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          1120,
          680
        ],
        "id": "3305c666-6ea1-450e-97bf-2e45a0208866",
        "name": "Organizing Params: projects, documents"
      },
      {
        "parameters": {
          "mode": "combine",
          "advanced": true,
          "mergeByFields": {
            "values": [
              {
                "field1": "document_id",
                "field2": "target_document_ids"
              }
            ]
          },
          "joinMode": "enrichInput1",
          "options": {}
        },
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.2,
        "position": [
          2500,
          480
        ],
        "id": "5e77166b-1b6d-419c-b0d0-566bbf4d4372",
        "name": "Project < Documents < Blocks",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "mode": "combine",
          "fieldsToMatchString": "block_id",
          "joinMode": "keepEverything",
          "options": {}
        },
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.2,
        "position": [
          2660,
          800
        ],
        "id": "6011b8c3-0fff-4238-9d61-8b0c526cb313",
        "name": "Project < Documents < Blocks < Tables",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "content": "# 4. Merge Projects < Documents < Blocks to one node\n",
          "height": 680,
          "width": 1060,
          "color": 4
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          1940,
          0
        ],
        "typeVersion": 1,
        "id": "958ab83c-5007-48fd-a738-71a8db08cd77",
        "name": "Sticky Note2"
      },
      {
        "parameters": {
          "content": "# 5. Merge table to node which is generated from #4.\n",
          "height": 400,
          "width": 1060
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          1940,
          680
        ],
        "typeVersion": 1,
        "id": "c735a86c-074a-4a87-bad0-8d61b7fcb15c",
        "name": "Sticky Note3"
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=**document_ids**: {{ $json.document_ids }}\n\n**document_names**: {{ $json.document_names }}\n\n**project_descriptions**: {{ $json.document_descriptions }}\n\n**user's message**: {{ $json.message }}",
          "hasOutputParser": true,
          "options": {
            "systemMessage": "# 🔧 System Prompt\n\nThe data contains three key components:\n\n- **`document_ids`**: A list of unique identifiers for each document. Each document is assigned a unique ID for identification.\n- **`document_names`**: A list of names corresponding to each document. Each document has a name that can be used to identify it more easily.\n- **`document_descriptions`**: A list of descriptions corresponding to each document. These descriptions provide additional details or context about each document. Note that some descriptions may be null, indicating that no description is available for that document.\n\nEach of these lists corresponds to each other in a 1-to-1 relationship. That means:\n\n- The first `document_id` corresponds to the first `document_name` and the first `document_description`.\n- The second `document_id` corresponds to the second `document_name` and the second `document_description`.\n- And so on...\n\n---\n\n## ✅ Your Task\n\nBased on the user's goal, you need to:\n\n1. **Review** the `document_names` and `document_descriptions` provided above.\n2. **Understand** the user's goal or requirements.\n3. **Identify** the most relevant documents by matching their names and descriptions with the user's intent.\n\n---\n\n## 🎯 Selection Rule\n\n- If the user wants to **review all document requirements**,  \n  → **Return all `document_ids`**.\n\n- If the user is interested in **only specific documents**,  \n  → **Return only the `document_ids`** that best match the user's needs.\n\n---\n\n## 🔁 Output Format\n\nReturn the selected `document_ids` as a **list**.\n"
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          1400,
          680
        ],
        "id": "f351206b-a540-49e6-8a3d-d45a78186dc9",
        "name": "AI Agent",
        "alwaysOutputData": true,
        "executeOnce": true,
        "retryOnFail": true,
        "maxTries": 5,
        "waitBetweenTries": 1000
      },
      {
        "parameters": {
          "modelName": "models/gemini-2.5-pro",
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          1400,
          860
        ],
        "id": "378bfb7d-65cd-4b18-83f8-61751bd3a6e5",
        "name": "gemini 2.5 pro 2",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "jsonSchemaExample": "[\n  {\n  \t\"target_document_ids\": \"adsfadgadsg1\"\n  }\n]"
        },
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "typeVersion": 1.2,
        "position": [
          1580,
          860
        ],
        "id": "6b741f2a-3c04-497f-86ce-96449952c5f4",
        "name": "Structured Output Parser2",
        "notesInFlow": true
      },
      {
        "parameters": {
          "jsCode": "// Extract the 'name' values from the input\nconst names = $input.all().map(item => item.json.document_name);\n\n// Extract the 'id' values from the input\nconst ids = $input.all().map(item => item.json.document_id);\n\nconst description = $input.all().map(item => item.json.document_description);\n\n\nreturn [\n  {\n    json: {\n      document_ids: ids,\n      document_names: names,\n      document_descriptions: description,\n      message: $('project_overview').first().json.query\n    }\n  }\n];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1260,
          460
        ],
        "id": "e6d0e4f2-3062-4ff9-8c74-93cd16c2ca02",
        "name": "Extract document's ids"
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items\nlet result = [];\n\n// Loop through all items\nfor (const item of $input.all()) {\n  // Ensure 'output' exists and is an array\n  if (item.json.output && Array.isArray(item.json.output)) {\n    // Extract target_document_ids from the output array\n    const targetDocumentIds = item.json.output.map(o => ({ target_document_ids: o.target_document_ids }));\n    \n    // Add the extracted target_document_ids to the result\n    result = result.concat(targetDocumentIds);\n  }\n}\n\n// Return the transformed result\nreturn result;\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1680,
          460
        ],
        "id": "98a7831a-6553-4871-98ad-7ea31aae8a0d",
        "name": "extract target_project_ids2"
      },
      {
        "parameters": {
          "content": "# 3. Selecting the documents to be reviewed based on the user's request",
          "height": 1080,
          "width": 560,
          "color": 5
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          1380,
          0
        ],
        "typeVersion": 1,
        "id": "9b68d61c-635a-46b6-a350-9297cff35cee",
        "name": "Sticky Note4"
      },
      {
        "parameters": {
          "mode": "combine",
          "advanced": true,
          "mergeByFields": {
            "values": [
              {
                "field1": "document_id",
                "field2": "target_document_ids"
              }
            ]
          },
          "outputDataFrom": "input1",
          "options": {}
        },
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.2,
        "position": [
          1820,
          240
        ],
        "id": "7efc93a2-870e-47c5-bd75-8b3f4af7a4c4",
        "name": "Extract selected document"
      },
      {
        "parameters": {
          "jsCode": "// Helper function to convert JSON object to markdown string\nfunction jsonToMarkdown(jsonObj) {\n    let markdown = '';\n    \n    // Keys to exclude from markdown conversion\n    const excludedKeys = ['organization_id', 'project_id', 'id', 'document_id', 'block_id'];\n    \n    for (const [key, value] of Object.entries(jsonObj)) {\n        // Skip excluded keys\n        if (excludedKeys.includes(key)) {\n            continue;\n        }\n        \n        markdown += `**${key}**: `;\n        \n        if (typeof value === 'string') {\n            markdown += `${value}\\n`;\n        } else if (typeof value === 'number' || typeof value === 'boolean') {\n            markdown += `${value}\\n`;\n        } else if (value === null) {\n            markdown += `null\\n`;\n        } else if (typeof value === 'object') {\n            markdown += `\\n${JSON.stringify(value, null, 2)}\\n`;\n        } else {\n            markdown += `${value}\\n`;\n        }\n    }\n    \n    return markdown;\n}\n\n// Collect all markdown strings from each item.json\nlet allDocumentsMarkdown = '';\n\nfor (const item of $input.all()) {\n    // Convert each item.json to markdown\n    const markdownString = jsonToMarkdown(item.json);\n    \n    // Add to the combined string with double newlines between items\n    if (allDocumentsMarkdown !== '') {\n        allDocumentsMarkdown += '\\n\\n';\n    }\n    allDocumentsMarkdown += markdownString;\n}\n\n// Return new array with single object containing all documents as markdown\nreturn [{\"all_documents\": allDocumentsMarkdown}];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          3060,
          800
        ],
        "id": "55df9e8f-22d4-407d-8198-bff682a950a2",
        "name": "Return to User"
      },
      {
        "parameters": {
          "content": "# Return To User\n",
          "height": 420,
          "width": 480,
          "color": 3
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          3000,
          660
        ],
        "typeVersion": 1,
        "id": "01d2aa63-e2e2-4fbf-88b7-7063a806d5fd",
        "name": "Sticky Note5"
      },
      {
        "parameters": {
          "workflowInputs": {
            "values": [
              {
                "name": "query"
              }
            ]
          }
        },
        "id": "27533efc-414f-4b30-93d9-6865c2cc10a0",
        "typeVersion": 1.1,
        "name": "project_overview",
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "position": [
          -220,
          240
        ]
      },
      {
        "parameters": {
          "multipleMethods": true,
          "httpMethod": [
            "POST"
          ],
          "path": "agent_webhook",
          "responseMode": "responseNode",
          "options": {}
        },
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 2,
        "position": [
          60,
          2800
        ],
        "id": "3d5d25b6-d4c2-477d-9842-1cfbf65cc868",
        "name": "Webhook",
        "webhookId": "3ba97027-8ffa-4258-b325-83fa8cf09024"
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "c1ab12f8-3171-489d-870b-c5721892e68e",
                      "leftValue": "={{ $json.output === \"1\" }}",
                      "rightValue": "=1",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "DB case"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "3f3978a5-6df5-4e9b-9ce0-ff2c440f8d68",
                      "leftValue": "={{ $json.output === \"2\" }}",
                      "rightValue": "=2",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "Web Search case"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "2954d490-9b69-4517-9296-91191c78cff8",
                      "leftValue": "={{ $json.output === \"3\" }}",
                      "rightValue": "=3",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "Message cases"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "1806d09e-5de2-4fe4-9ca8-d181ae7fb728",
                      "leftValue": "={{ $json.output === \"4\" }}",
                      "rightValue": "4",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "MISC"
              }
            ]
          },
          "looseTypeValidation": true,
          "options": {}
        },
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3.2,
        "position": [
          620,
          2780
        ],
        "id": "bef1df85-73bf-423f-bb01-3b154c194b0e",
        "name": "Switch",
        "alwaysOutputData": false,
        "executeOnce": true,
        "notesInFlow": true,
        "onError": "continueRegularOutput"
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=Conversation History: {{ $json.conversation_history }}\nHuman's Current Message: {{ $json.body.message }}\nTask: Classify the human's request into one of the four categories and return the corresponding number (1, 2, 3, or 4).",
          "hasOutputParser": true,
          "options": {
            "systemMessage": "=System Message\n🎯 Task Overview\nYou are a classification system that categorizes user requests into one of four specific categories based on the type of action or information required.\n📋 Classification Categories\nCategory 1: Project/Member Information\n\nReturn: 1\nWhen to use: If the user's request requires checking organization, project information, documents or details about other members to provide an answer.\nExamples:\n\n\"List up all the requirement documents.\"\n\"Can you show all the projects?\"\n\"Show me details about team member John's projects\"\n\n\nCategory 2: External Information/Web Search\n\nReturn: 2\nWhen to use: If the human's request requires checking external information through a web searching function and providing an answer.\nExamples:\n\n\"What's the latest news about our industry?\"\n\"Find information about competitor pricing\"\n\"Search for current market trends\"\n\n\n\nCategory 3: Communication Actions\n\nReturn: 3\nWhen to use: If the human's request is to send an email or Slack message.\nExamples:\n\n\"Send an email to the team about the meeting\"\n\"Email the client about project updates\"\n\n\n\nCategory 4: All Other Cases\n\nReturn: 4\nWhen to use: For all other cases that don't fit into categories 1, 2, or 3.\nExamples:\n\n\n🔍 Analysis Process\n\nRead the conversation history carefully\nUnderstand the human's current message context\nIdentify which category best fits the request\nReturn only the number (1, 2, 3, or 4)\n\n📤 Output Format\nReturn only the classification number: 1, 2, 3, or 4"
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          340,
          2800
        ],
        "id": "99e4ba14-d6cc-4364-8de7-eadabe879800",
        "name": "Agent - Distinguishing User Cases",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=Conversation History:\n\"\"\"\n{{ $('Parameters').item.json.conversation_history }}\n\"\"\"\n\nUesrs Question:\n\"\"\"\n{{ $('Webhook').item.json.body.message }}\n\"\"\"",
          "hasOutputParser": true,
          "options": {
            "systemMessage": "Your are ```ATOMS``` a systems engineering assistant that will help project managers and system engineers with their requirements.\n\nTo improve readability, use things like emoticons to help users visually as well."
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          1360,
          3400
        ],
        "id": "50fcdec0-6af7-4fbc-93bb-c099322b7698",
        "name": "Agent treating MISC",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=If the information cannot be found, return \"email\": null.\n\nAnd here is user conversation and current user's request.\n\nConversation History: \"{{ $('Parameters').item.json.conversation_history }}\"\n\nThrough this answer this user's current question.\n{{ $('Webhook').item.json.body.message }}\n\nIf the user wants to send an email, and the recipient's name and email can be found from the Conversation History and the User's request, return a JSON file with the following structure:\n[{\n  \"name\": \"the recipient's name\",\n  \"email\": \"the recipient's email\",\n  \"Title\": \"the email subject, containing sender's name: {{ $('Webhook').item.json.body.secureContext.username }}\",\n  \"Context\": \"the content the user wants to send\"\n}]\n",
          "hasOutputParser": true,
          "options": {
            "systemMessage": "You must return json format which user requested."
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          1360,
          3100
        ],
        "id": "d9f2a749-dff1-43dc-9801-bbfc630e7ac4",
        "name": "Agent Sending Message",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"reply\": {{ JSON.stringify($json.output) }}\n}",
          "options": {
            "responseCode": 200
          }
        },
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1.3,
        "position": [
          2880,
          3100
        ],
        "id": "b54ba28e-b003-43ac-b206-36bf36b2e111",
        "name": "Respond to Webhook Message Success"
      },
      {
        "parameters": {
          "modelName": "models/gemini-2.5-flash-preview-04-17-thinking",
          "options": {
            "maxOutputTokens": 2048,
            "temperature": 0.3,
            "topP": 0.9
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          1380,
          2960
        ],
        "id": "077f341f-53ba-49ca-bfe1-d70d6a98d934",
        "name": "Google Gemini Chat Model4",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"reply\": {{ JSON.stringify($json.output) }}\n} ",
          "options": {}
        },
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1.3,
        "position": [
          1740,
          3400
        ],
        "id": "7c199860-a9ad-4692-a21c-32677b1af44f",
        "name": "Respond to Webhook"
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items and extract JSON from output field\nconst results = [];\n\nfor (const item of $input.all()) {\n  // Extract JSON content from the output field\n  const outputText = item.json.output;\n  \n  // Regular expression to extract content between ```json and ```\n  const jsonMatch = outputText.match(/```json\\n([\\s\\S]*?)\\n```/);\n  \n  if (jsonMatch) {\n    try {\n      // Parse the JSON string\n      const parsedJson = JSON.parse(jsonMatch[1]);\n      \n      // If it's an array, add myNewField to each item\n      if (Array.isArray(parsedJson)) {\n        for (const jsonItem of parsedJson) {\n          jsonItem.myNewField = 1;\n        }\n        results.push(...parsedJson);\n      } else {\n        // If it's a single object\n        parsedJson.myNewField = 1;\n        results.push(parsedJson);\n      }\n    } catch (error) {\n      console.error('JSON parsing error:', error);\n    }\n  }\n}\n\nreturn results;"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1660,
          3100
        ],
        "id": "84cf60c7-7d71-4391-8b14-a2aa7fa0b595",
        "name": "Extract Email Json",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=You sent email information below json file.\n\n{{ $('Agent Sending Message').item.json.output }}",
          "options": {
            "systemMessage": "You are ATOMS a systems engineering assistant that will help project managers and system engineers with their requirements\n\nBriefly explain the content of the email you sent and to whom in one output.\n\nTo improve readability, use things like emoticons to help users visually as well.\n\nAlways write in a highly readable manner."
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          2500,
          3100
        ],
        "id": "6adeeeb1-5cc9-4b68-9153-43f6387ce484",
        "name": "AI Agent1",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"reply\": \"Case2\"\n}",
          "options": {
            "responseCode": 200
          }
        },
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1.3,
        "position": [
          1760,
          2780
        ],
        "id": "cabb3f76-e5b1-498e-87d6-6ba53285ab33",
        "name": "Respond to Webhook Message Success1"
      },
      {
        "parameters": {
          "modelName": "models/gemini-1.5-pro",
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          2540,
          3240
        ],
        "id": "a6c21422-da54-4510-9ea1-66276c5e8913",
        "name": "gemini 1.5 pro",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "fieldToSplitOut": "name, email, Title, Context",
          "options": {}
        },
        "type": "n8n-nodes-base.splitOut",
        "typeVersion": 1,
        "position": [
          1840,
          3100
        ],
        "id": "62b8a305-1a56-467d-9304-86851c7692bb",
        "name": "Split Out"
      },
      {
        "parameters": {
          "batchSize": 4,
          "options": {}
        },
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 3,
        "position": [
          2080,
          3080
        ],
        "id": "dbc07370-aa87-416d-9c83-aaac0e5a1f99",
        "name": "Loop Over Items"
      },
      {
        "parameters": {
          "modelName": "models/gemini-2.5-pro-preview-06-05",
          "options": {
            "maxOutputTokens": 2048,
            "temperature": 0.3,
            "topP": 0.9
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          1340,
          3260
        ],
        "id": "194f7eae-6f86-46b7-867d-51576b8f5f28",
        "name": "gemini 2.5 06-05",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "sendTo": "={{ $json.email }}",
          "subject": "={{ $json.Title }}",
          "emailType": "text",
          "message": "={{ $json.Context }}",
          "options": {}
        },
        "type": "n8n-nodes-base.gmail",
        "typeVersion": 2.1,
        "position": [
          2280,
          3180
        ],
        "id": "becfb495-a28a-4567-997e-518c78c1b769",
        "name": "Send a message",
        "webhookId": "22813492-1279-4d04-9fe5-3686f0485c42",
        "disabled": true
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=This is human's organizations requirements documents.\n---\nrequirement documents: {{ $json.all_documents }}\n---\nHuman's organization: {{ $json.organizationName }}\n---\nThis is human's name: {{ $json.username }}\n---\nAnd this is human's request.\nrequest: {{ $json.message }}\n---\nAnd this is the conversation history between you and human.\nhistory: {{ $json.conversation_history }}\n---",
          "options": {
            "systemMessage": "You are ATOMS a systems engineering assistant that will help project managers and system engineers with their requirements\n\n## Purpose:\nThe goal is to ensure that the LLM (Large Language Model) effectively reviews the human's organization's requirement documents, understands the human's question, and provides a clear, concise, and relevant answer based on the documents. The response should be understandable and easy to follow.\n\n## Task Instructions:\n\n1. **Review All Documents**:\n    - The LLM should **examine the `requirement_documents`** carefully. This is crucial as the answer to the human’s question must be based on the contents of these documents. The LLM should ensure the information used in the response is drawn directly from these documents.\n\n2. **Understand the human's Request**:\n    - The LLM must carefully read and understand the human’s question (`question`). Consider the language, tone, and context of the question to ensure a comprehensive understanding of what the human is asking.\n    - **Key Actions**:\n        - Identify the main request of the human (e.g., clarification, explanation, specific information).\n        - Cross-reference with the requirement documents to find the most relevant information.\n\n3. **Formulate the Response**:\n    - **Concise and Clean**: Ensure the response is direct and avoids unnecessary complexity. The answer should be understandable and to the point.\n    - **Relevance**: The response must be based strictly on the `requirement_documents`. Use the relevant document content to answer the human's request.\n    - **Clarity**: Write in a way that’s easy to follow and free of jargon (unless it’s necessary and explained).\n\n4. **Ensure Accuracy**:\n    - When answering, double-check the accuracy of the information from the documents. If there are multiple options or pieces of information, select the one most relevant to the human's needs.\n    - If the human’s question cannot be fully answered due to lack of information, respond politely and state what additional information is needed, referencing the documents as necessary.\n\n5. **Readability**:\n    - To improve readability, use things like emoticons to help users visually as well."
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          3460,
          2520
        ],
        "id": "f8682033-2300-46a1-8494-0ee55b40d170",
        "name": "Agent Checked DB2",
        "alwaysOutputData": true
      },
      {
        "parameters": {},
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.2,
        "position": [
          3060,
          2520
        ],
        "id": "c30f989a-507c-46eb-91f4-72f6d659fcd4",
        "name": "Merge",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "jsCode": "// Merge all input items into a single object\nconst inputItems = $input.all();\nconst mergedData = {};\n// Process each item and merge into single object\nfor (const item of inputItems) {\n  // If item has all_documents, add it to merged data\n  if (item.json.all_documents) {\n    mergedData.all_documents = item.json.all_documents;\n  }\n\n  // If item has body structure, extract and add to merged data\n  if (item.json.body) {\n    mergedData.message = item.json.body.message || null;\n    mergedData.username = item.json.body.secureContext?.username || null;\n    mergedData.organizationName = item.json.body.secureContext?.organizationName || null;\n  }\n\n  // If item has conversation_history, add to merged data\n  if (item.json.conversation_history) {\n    mergedData.conversation_history = item.json.conversation_history;\n  }\n\n  // Also check for direct properties in case they exist\n  if (item.json.organizationName) {\n    mergedData.organizationName = item.json.organizationName;\n  }\n  if (item.json.username) {\n    mergedData.username = item.json.username;\n  }\n  if (item.json.message) {\n    mergedData.message = item.json.message;\n  }\n}\n// Return as a single item array\nreturn [{ json: mergedData }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          3280,
          2520
        ],
        "id": "7634ca7a-e96f-4809-8921-01c80961b4d2",
        "name": "Code",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=**document_ids**: {{ $json.document_ids }}\n\n**document_names**: {{ $json.document_names }}\n\n**project_descriptions**: {{ $json.document_descriptions }}\n\n**human's message**: {{ $json.message }}",
          "hasOutputParser": true,
          "options": {
            "systemMessage": "# 🔧 System Prompt\n\nThe data contains three key components:\n\n- **`document_ids`**: A list of unique identifiers for each document. Each document is assigned a unique ID for identification.\n- **`document_names`**: A list of names corresponding to each document. Each document has a name that can be used to identify it more easily.\n- **`document_descriptions`**: A list of descriptions corresponding to each document. These descriptions provide additional details or context about each document. Note that some descriptions may be null, indicating that no description is available for that document.\n\nEach of these lists corresponds to each other in a 1-to-1 relationship. That means:\n\n- The first `document_id` corresponds to the first `document_name` and the first `document_description`.\n- The second `document_id` corresponds to the second `document_name` and the second `document_description`.\n- And so on...\n\n---\n\n## ✅ Your Task\n1. **Review** the `document_names` and `document_descriptions` provided above.\n2. **Understand** the human's message or requirements.\n3. **Identify** the most relevant documents by matching their names and descriptions with the human's message.\n\n---\n\n## 🎯 Selection Rule\n\n- If the human wants to **review all document requirements**,  \n  → **Return all `document_ids`**.\n\n- If the human is interested in **only specific documents**,  \n  → **Return only the `document_ids`** that best match the user's needs.\n\n---\n\n## 🔁 Output Format\n\nReturn the selected `target_document_ids` as a **list**.\n"
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          5400,
          3040
        ],
        "id": "d564740d-34f5-4800-b145-ed8c3d726400",
        "name": "Extracting Documents ids",
        "alwaysOutputData": true,
        "executeOnce": true,
        "retryOnFail": true,
        "maxTries": 5,
        "waitBetweenTries": 100
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"reply\": {{ JSON.stringify($json.output) }}\n}",
          "options": {}
        },
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1.3,
        "position": [
          3780,
          2520
        ],
        "id": "44be2187-c6eb-49d9-b204-753df0418344",
        "name": "Respond to Webhook - DB",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "901498bf-70a5-44d3-8aee-8e25bca1be7f",
                "name": "document_id",
                "value": "={{ $json.id }}",
                "type": "string"
              },
              {
                "id": "625e3bc4-d13a-4ff3-a38c-886bd576d70e",
                "name": "document_name",
                "value": "={{ $json.name }}",
                "type": "string"
              },
              {
                "id": "a215a6f3-98a0-4403-b53a-b2807c906dd6",
                "name": "document_description",
                "value": "={{ $json.description }}",
                "type": "string"
              },
              {
                "id": "f393e65e-2878-45cf-b496-709aca653854",
                "name": "project_id",
                "value": "={{ $json.project_id }}",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          1480,
          2240
        ],
        "id": "698175d0-c8d8-45ea-abf0-4237df5767da",
        "name": "Edit Fields"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "75c48f75-3528-49d2-9746-039592cb2cfd",
                "name": "project_id",
                "value": "={{ $json.project_id }}",
                "type": "string"
              },
              {
                "id": "a0632af5-66b0-4dad-8040-970fefaecbf1",
                "name": "project_name",
                "value": "={{ $json.name }}",
                "type": "string"
              },
              {
                "id": "c1af94ad-afad-4e3e-9bb4-53bf213d48ed",
                "name": "project_description",
                "value": "={{ $json.description }}",
                "type": "string"
              },
              {
                "id": "21bf6cd9-d1ab-4511-a556-feabffdcb8f6",
                "name": "document_id",
                "value": "={{ $json.document_id }}",
                "type": "string"
              },
              {
                "id": "4d0d00c5-5d84-468c-815c-eb76c5a3c0c2",
                "name": "document_name",
                "value": "={{ $json.document_name }}",
                "type": "string"
              },
              {
                "id": "dcdb38dc-49e4-4a43-b1e6-8a4a68e727ce",
                "name": "document_description",
                "value": "={{ $json.document_description }}",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          1800,
          2240
        ],
        "id": "3662d123-3b15-494c-8d5b-c992a40a6dc0",
        "name": "set: projects, documents"
      },
      {
        "parameters": {
          "modelName": "models/gemini-2.5-flash-lite-preview-06-17",
          "options": {
            "maxOutputTokens": 500,
            "temperature": 0.3,
            "topP": 0.9
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          340,
          2980
        ],
        "id": "53a06660-95d6-49e8-bd0f-77fa0ffff9f0",
        "name": "gemini 2.5 flash lite preview",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "modelName": "models/gemini-2.5-flash-lite-preview-06-17",
          "options": {
            "maxOutputTokens": 2048,
            "temperature": 0.3,
            "topP": 0.9
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          5400,
          3240
        ],
        "id": "309816e6-d842-4575-b83a-baf589dc98e6",
        "name": "gemini 2.5 flash lite",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "content": "# Distinguishing User Question\n## Agent first will classify from 1 to 4\n### **1** - The question which Agent needs to look up the Supabase table.\n### **2** - The question which Agent needs to web search for user.\n### **3** - The question which Agent needs to message to someone through slack or gmail.\n### **4** - If the question is not the case for 1,2,3, then pass to 4 and generate answer.",
          "height": 1940,
          "width": 800
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          -20,
          1800
        ],
        "typeVersion": 1,
        "id": "18d98d7c-67b7-4542-a621-e272f4a7e540",
        "name": "Sticky Note6"
      },
      {
        "parameters": {
          "content": "\n\n\n\n\n# Case 4\n## Generate the answer current \n## question with conversation history.",
          "height": 380,
          "width": 2300,
          "color": 7
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          780,
          3360
        ],
        "typeVersion": 1,
        "id": "4ac7bfed-d9ad-4115-8572-e3ce7a29e458",
        "name": "Sticky Note7"
      },
      {
        "parameters": {
          "content": "# Case 3\n## Message to someone\n### **Gmail**\n### **Slack**",
          "height": 400,
          "width": 2300,
          "color": 6
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          780,
          2960
        ],
        "typeVersion": 1,
        "id": "f54c8df0-89cf-4056-bfe1-7226c3b3cc5c",
        "name": "Sticky Note8"
      },
      {
        "parameters": {
          "content": "# Case 1\n## Case 1 should be classified more detaied.\n### 1 - Does user want to check Requirements documents?\n### 2 - Does user want to check Regulation Documents?\n",
          "height": 880,
          "width": 800,
          "color": 3
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          3500,
          1800
        ],
        "typeVersion": 1,
        "id": "73206d4a-a31d-45c3-b69b-7004e718e715",
        "name": "Sticky Note9"
      },
      {
        "parameters": {
          "content": "## Pulling Project's Regulation, Requirements documents Context\n",
          "height": 880,
          "width": 3400,
          "color": 4
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          780,
          1800
        ],
        "typeVersion": 1,
        "id": "2eb29d06-d9a9-4a88-b754-a9e642a19ec6",
        "name": "Sticky Note10"
      },
      {
        "parameters": {
          "content": "# Case 2\n## WebSearch\n",
          "height": 280,
          "width": 3520,
          "color": 2
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          780,
          2680
        ],
        "typeVersion": 1,
        "id": "b97eda52-297b-4987-80e1-7f8c7e132843",
        "name": "Sticky Note11"
      },
      {
        "parameters": {
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          1420,
          2780
        ],
        "id": "c558ba5d-a115-4426-a20b-ac4024846560",
        "name": "AI Agent2"
      },
      {
        "parameters": {
          "fieldToSplitOut": "id, document_id, type, content.text, position",
          "options": {}
        },
        "type": "n8n-nodes-base.splitOut",
        "typeVersion": 1,
        "position": [
          2120,
          2240
        ],
        "id": "31074b13-72da-471e-a554-b3186b02c855",
        "name": "Split Out - ids,context.text1",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "operation": "getAll",
          "tableId": "requirements",
          "returnAll": true,
          "filters": {
            "conditions": [
              {
                "keyName": "document_id",
                "condition": "eq",
                "keyValue": "={{ $json.document_id }}"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          1960,
          2440
        ],
        "id": "fce236e3-3d82-4197-936c-a83047912bc8",
        "name": "Get Tables1",
        "alwaysOutputData": true,
        "executeOnce": false,
        "credentials": {
          "supabaseApi": {
            "id": "4T7K0ALnwHMmf2mr",
            "name": "Supabase account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "const keysToRemove = [\n  \"format\",\n  \"level\",\n  \"tags\",\n  \"position\",\n  \"type\",\n  \"original_requirement\",\n  \"enchanced_requirement\",\n  \"ai_analysis\",\n  \"created_at\",\n  \"updated_at\",\n  \"created_by\",\n  \"updated_by\",\n  \"version\",\n  \"is_deleted\",\n  \"deleted_at\",\n  \"deleted_by\",\n  \"properties\",\n];\n\nfor (const item of $input.all()) {\n  if (item.json && typeof item.json === 'object') {\n    if (item.json.properties && item.json.properties.Email && item.json.properties.Email.value) {\n      item.json.email = item.json.properties.Email.value;\n    }\n    \n    for (const key of keysToRemove) {\n      delete item.json[key];\n    }\n  }\n}\n\nreturn $input.all();"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          2120,
          2440
        ],
        "id": "52f27e87-26ed-45ca-8c2a-533c8c996339",
        "name": "Refine param from Table1",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "operation": "getAll",
          "tableId": "blocks",
          "returnAll": true,
          "filters": {
            "conditions": [
              {
                "keyName": "document_id",
                "condition": "eq",
                "keyValue": "={{ $json.document_id }}"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          1960,
          2240
        ],
        "id": "0a59f468-79b1-4530-89a7-544db99affe8",
        "name": "blocks & text_from_document_ids1",
        "executeOnce": false,
        "alwaysOutputData": true,
        "credentials": {
          "supabaseApi": {
            "id": "4T7K0ALnwHMmf2mr",
            "name": "Supabase account"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "advanced": true,
          "mergeByFields": {
            "values": [
              {
                "field1": "document_id",
                "field2": "document_id"
              }
            ]
          },
          "joinMode": "enrichInput1",
          "options": {}
        },
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.2,
        "position": [
          2560,
          2140
        ],
        "id": "29373eab-ada8-4b86-be9a-08ed6b65cd08",
        "name": "Project < Documents < Blocks1",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "mode": "combine",
          "fieldsToMatchString": "document_id",
          "joinMode": "keepEverything",
          "options": {}
        },
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.2,
        "position": [
          2720,
          2420
        ],
        "id": "a4016315-9ccc-4462-9a22-a916a44eff39",
        "name": "Project < Documents < Blocks < Tables1",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "jsonSchemaExample": "[\n  {\n  \t\"target_document_ids\": \"adsfadgadsg1\"\n  }\n]"
        },
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "typeVersion": 1.2,
        "position": [
          5580,
          3240
        ],
        "id": "962ca611-f3ad-4485-9b36-5f282c2e672b",
        "name": "Structured Output Parser3",
        "notesInFlow": true
      },
      {
        "parameters": {
          "jsCode": "// Helper function to convert JSON object to markdown string\nfunction jsonToMarkdown(jsonObj) {\n    let markdown = '';\n    \n    // Keys to exclude from markdown conversion\n    const excludedKeys = ['organization_id', 'project_id', 'id', 'document_id', 'block_id'];\n    \n    for (const [key, value] of Object.entries(jsonObj)) {\n        // Skip excluded keys\n        if (excludedKeys.includes(key)) {\n            continue;\n        }\n        \n        markdown += `**${key}**: `;\n        \n        if (typeof value === 'string') {\n            markdown += `${value}\\n`;\n        } else if (typeof value === 'number' || typeof value === 'boolean') {\n            markdown += `${value}\\n`;\n        } else if (value === null) {\n            markdown += `null\\n`;\n        } else if (typeof value === 'object') {\n            markdown += `\\n${JSON.stringify(value, null, 2)}\\n`;\n        } else {\n            markdown += `${value}\\n`;\n        }\n    }\n    \n    return markdown;\n}\n\n// Collect all markdown strings from each item.json\nlet allDocumentsMarkdown = '';\n\nfor (const item of $input.all()) {\n    // Convert each item.json to markdown\n    const markdownString = jsonToMarkdown(item.json);\n    \n    // Add to the combined string with double newlines between items\n    if (allDocumentsMarkdown !== '') {\n        allDocumentsMarkdown += '\\n\\n';\n    }\n    allDocumentsMarkdown += markdownString;\n}\n\n// Return new array with single object containing all documents as markdown\nreturn [{\"all_documents\": allDocumentsMarkdown}];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          2880,
          2440
        ],
        "id": "119cebe6-3c36-4847-9ad8-30f216155d2a",
        "name": "Return to User1",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "useCustomSchema": true,
          "operation": "getAll",
          "tableId": "documents",
          "returnAll": true,
          "filters": {
            "conditions": [
              {
                "keyName": "project_id",
                "condition": "eq",
                "keyValue": "={{ $json.project_ids }}"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          1320,
          2240
        ],
        "id": "3a178f00-c227-4353-9b5d-7a9a275a14ab",
        "name": "Get Documents from Selected Project1",
        "alwaysOutputData": true,
        "credentials": {
          "supabaseApi": {
            "id": "4T7K0ALnwHMmf2mr",
            "name": "Supabase account"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "advanced": true,
          "mergeByFields": {
            "values": [
              {
                "field1": "project_id",
                "field2": "id"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.2,
        "position": [
          1640,
          2460
        ],
        "id": "23b9936c-35a5-421d-80bf-5ed9649162cb",
        "name": "Merge: Project + documents1"
      },
      {
        "parameters": {
          "jsCode": "// Extract the 'name' values from the input\nconst names = $input.all().map(item => item.json.name);\n\n// Extract the 'id' values from the input\nconst ids = $input.all().map(item => item.json.id);\n\nconst description = $input.all().map(item => item.json.description);\n\n\nreturn [\n  {\n    json: {\n      project_ids: ids,\n      project_names: names,\n      project_descriptions: description,\n      user_question: $('Parameters').first().json.body.message\n    }\n  }\n];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1040,
          2240
        ],
        "id": "817e9870-f705-4986-ae46-dbb2cdb2c6ce",
        "name": "Extract Project's ids1",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "fieldToSplitOut": "project_ids, project_names, project_descriptions, user_question",
          "options": {}
        },
        "type": "n8n-nodes-base.splitOut",
        "typeVersion": 1,
        "position": [
          1180,
          2120
        ],
        "id": "a5788e9b-addf-49d1-ada9-731be40d41c9",
        "name": "Split Out2"
      },
      {
        "parameters": {
          "options": {
            "maxOutputTokens": 10000000,
            "temperature": 0.3,
            "topP": 0.9
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          3440,
          2680
        ],
        "id": "0626eb01-6b1a-4387-a109-e2f03897a833",
        "name": "gemini 2.5 flash",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "7a32115c-8048-4a47-9bf8-a69f2cc8b186",
                "name": "body.message",
                "value": "={{ $('Webhook').item.json.body.message }}",
                "type": "string"
              },
              {
                "id": "fc0eb8ce-9ad7-4011-bbce-7a0a7432cb86",
                "name": "body.secureContext.username",
                "value": "={{ $('Webhook').item.json.body.secureContext.username }}",
                "type": "string"
              },
              {
                "id": "b16326f9-50d7-426e-941f-33d18d927bc8",
                "name": "conversation_history",
                "value": "={{ $('Webhook').item.json.body.conversationHistory }}",
                "type": "string"
              },
              {
                "id": "aaedadd6-d02f-4283-81eb-083d7363e569",
                "name": "body.secureContext.organizationName",
                "value": "={{ $json.body.secureContext.orgName }}",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          200,
          2800
        ],
        "id": "3778ac83-b216-48c4-b260-9eb8e4a165dd",
        "name": "Parameters"
      },
      {
        "parameters": {
          "language": "python",
          "pythonCode": "import re\n\n# Loop over input items and filter out items with empty content.text\nfiltered_items = []\nfor item in _input.all():\n    content_text = item.json.get(\"content.text\", \"\")\n    \n    # Skip if content.text is empty or contains only HTML tags without content\n    if (type == \"table\" or not content_text or \n        not content_text.strip() or\n        content_text.strip() == '<p></p>' or\n        not re.sub(r'<[^>]*>', '', content_text).strip()):\n        continue  # Skip this item\n    \n    filtered_items.append(item)\n\nreturn filtered_items"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          2340,
          2240
        ],
        "id": "e1df2605-d1d2-4afd-aaba-b89b8b25d60d",
        "name": "Data Mining",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "options": {
            "maxOutputTokens": 1000000,
            "temperature": 0.3,
            "topP": 0.9
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          1340,
          3560
        ],
        "id": "f5165b2e-4fc2-4c7f-86f8-92b80f28546e",
        "name": "gemini2.5 flash",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "useCustomSchema": true,
          "operation": "get",
          "tableId": "projects",
          "filters": {
            "conditions": [
              {
                "keyName": "organization_id",
                "keyValue": "={{ $('Webhook').item.json.body.secureContext.pinnedOrganizationId }}"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          900,
          2480
        ],
        "id": "faa9553f-858f-461f-bb30-60402b6a0648",
        "name": "Pull Org Project Lists2",
        "alwaysOutputData": true,
        "credentials": {
          "supabaseApi": {
            "id": "4T7K0ALnwHMmf2mr",
            "name": "Supabase account"
          }
        }
      }
    ],
    "connections": {
      "Pull Org Project Lists": {
        "main": [
          [
            {
              "node": "Extract Project's ids",
              "type": "main",
              "index": 0
            },
            {
              "node": "Merge: Project + documents",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Project's ids": {
        "main": [
          [
            {
              "node": "Agent Checked DB",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Agent Checked DB": {
        "main": [
          [
            {
              "node": "extract target_project_ids",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out - ids,context.text": {
        "main": [
          [
            {
              "node": "Set params from blocks",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Agent Checked DB",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "extract target_project_ids": {
        "main": [
          [
            {
              "node": "Get Documents from Selected Project",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "gemini 2.5 pro": {
        "ai_languageModel": [
          [
            {
              "node": "Agent Checked DB",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "set_document_id,name,description": {
        "main": [
          [
            {
              "node": "Merge: Project + documents",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Get Tables": {
        "main": [
          [
            {
              "node": "Refine param from Table",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set params from blocks": {
        "main": [
          [
            {
              "node": "Project < Documents < Blocks",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Refine param from Table": {
        "main": [
          [
            {
              "node": "Project < Documents < Blocks < Tables",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Merge: Project + documents": {
        "main": [
          [
            {
              "node": "Organizing Params: projects, documents",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "blocks & text_from_document_ids": {
        "main": [
          [
            {
              "node": "Split Out - ids,context.text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Documents from Selected Project": {
        "main": [
          [
            {
              "node": "set_document_id,name,description",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Organizing Params: projects, documents": {
        "main": [
          [
            {
              "node": "Extract document's ids",
              "type": "main",
              "index": 0
            },
            {
              "node": "Extract selected document",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Project < Documents < Blocks": {
        "main": [
          [
            {
              "node": "Project < Documents < Blocks < Tables",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Project < Documents < Blocks < Tables": {
        "main": [
          [
            {
              "node": "Return to User",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent": {
        "main": [
          [
            {
              "node": "extract target_project_ids2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "gemini 2.5 pro 2": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser2": {
        "ai_outputParser": [
          [
            {
              "node": "AI Agent",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Extract document's ids": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "extract target_project_ids2": {
        "main": [
          [
            {
              "node": "blocks & text_from_document_ids",
              "type": "main",
              "index": 0
            },
            {
              "node": "Get Tables",
              "type": "main",
              "index": 0
            },
            {
              "node": "Extract selected document",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Extract selected document": {
        "main": [
          [
            {
              "node": "Project < Documents < Blocks",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "project_overview": {
        "main": [
          [
            {
              "node": "Pull Org Project Lists",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "Parameters",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Switch": {
        "main": [
          [
            {
              "node": "Pull Org Project Lists2",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "AI Agent2",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Agent Sending Message",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Agent treating MISC",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Agent - Distinguishing User Cases": {
        "main": [
          [
            {
              "node": "Switch",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Agent treating MISC": {
        "main": [
          [
            {
              "node": "Respond to Webhook",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Agent Sending Message": {
        "main": [
          [
            {
              "node": "Extract Email Json",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Gemini Chat Model4": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent2",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Extract Email Json": {
        "main": [
          [
            {
              "node": "Split Out",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent1": {
        "main": [
          [
            {
              "node": "Respond to Webhook Message Success",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "gemini 1.5 pro": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent1",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Split Out": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Loop Over Items": {
        "main": [
          [
            {
              "node": "AI Agent1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Send a message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "gemini 2.5 06-05": {
        "ai_languageModel": [
          [
            {
              "node": "Agent Sending Message",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Send a message": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Agent Checked DB2": {
        "main": [
          [
            {
              "node": "Respond to Webhook - DB",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge": {
        "main": [
          [
            {
              "node": "Code",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Code": {
        "main": [
          [
            {
              "node": "Agent Checked DB2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extracting Documents ids": {
        "main": [
          []
        ]
      },
      "Edit Fields": {
        "main": [
          [
            {
              "node": "Merge: Project + documents1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "set: projects, documents": {
        "main": [
          [
            {
              "node": "blocks & text_from_document_ids1",
              "type": "main",
              "index": 0
            },
            {
              "node": "Get Tables1",
              "type": "main",
              "index": 0
            },
            {
              "node": "Project < Documents < Blocks1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "gemini 2.5 flash lite preview": {
        "ai_languageModel": [
          [
            {
              "node": "Agent - Distinguishing User Cases",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "gemini 2.5 flash lite": {
        "ai_languageModel": [
          [
            {
              "node": "Extracting Documents ids",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent2": {
        "main": [
          [
            {
              "node": "Respond to Webhook Message Success1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out - ids,context.text1": {
        "main": [
          [
            {
              "node": "Data Mining",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Tables1": {
        "main": [
          [
            {
              "node": "Refine param from Table1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Refine param from Table1": {
        "main": [
          [
            {
              "node": "Project < Documents < Blocks < Tables1",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "blocks & text_from_document_ids1": {
        "main": [
          [
            {
              "node": "Split Out - ids,context.text1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Project < Documents < Blocks1": {
        "main": [
          [
            {
              "node": "Project < Documents < Blocks < Tables1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Project < Documents < Blocks < Tables1": {
        "main": [
          [
            {
              "node": "Return to User1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser3": {
        "ai_outputParser": [
          [
            {
              "node": "Extracting Documents ids",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Return to User1": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Documents from Selected Project1": {
        "main": [
          [
            {
              "node": "Edit Fields",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge: Project + documents1": {
        "main": [
          [
            {
              "node": "set: projects, documents",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Project's ids1": {
        "main": [
          [
            {
              "node": "Split Out2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out2": {
        "main": [
          [
            {
              "node": "Get Documents from Selected Project1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "gemini 2.5 flash": {
        "ai_languageModel": [
          [
            {
              "node": "Agent Checked DB2",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Parameters": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            },
            {
              "node": "Agent - Distinguishing User Cases",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Data Mining": {
        "main": [
          [
            {
              "node": "Project < Documents < Blocks1",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "gemini2.5 flash": {
        "ai_languageModel": [
          [
            {
              "node": "Agent treating MISC",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Pull Org Project Lists2": {
        "main": [
          [
            {
              "node": "Merge: Project + documents1",
              "type": "main",
              "index": 1
            },
            {
              "node": "Extract Project's ids1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "pinData": {
      "project_overview": [
        {
          "query": "List all requirements from all projects for the current user"
        }
      ]
    },
    "meta": {
      "instanceId": "d26b2a84234c2c4983f8b74ee4bb4d875412aeacbd4cd8b7cbaad7b8c7614526"
    }
  }