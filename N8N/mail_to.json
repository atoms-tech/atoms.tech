{
    "nodes": [
      {
        "parameters": {
          "promptType": "define",
          "text": "=If the information cannot be found, return \"email\": null.\n\nUser's request: \"{{ $json.query }}\"\"\n\nAnd here is all user's organization team member.\n\"\"\"\n{{ $json.profiles }}\n\"\"\"\n\nIf the user wants to send an email, and the recipient's name and email can be found from the Conversation History and the User's request, return a JSON file with the following structure:\n[{\n  \"name\": \"the recipient's name\",\n  \"email\": \"the recipient's email\",\n  \"Title\": \"the email subject\",\n  \"Context\": \"the content the user wants to send\"\n}]\n",
          "hasOutputParser": true,
          "options": {
            "systemMessage": "You must return json format which user requested."
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          300,
          -40
        ],
        "id": "77fd37c6-6e66-4ca4-83d5-f368d48e9fc4",
        "name": "Agent Sending Message",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items and extract JSON from output field\nconst results = [];\n\nfor (const item of $input.all()) {\n  // Extract JSON content from the output field\n  const outputText = item.json.output;\n  \n  // Regular expression to extract content between ```json and ```\n  const jsonMatch = outputText.match(/```json\\n([\\s\\S]*?)\\n```/);\n  \n  if (jsonMatch) {\n    try {\n      // Parse the JSON string\n      const parsedJson = JSON.parse(jsonMatch[1]);\n      \n      // If it's an array, add myNewField to each item\n      if (Array.isArray(parsedJson)) {\n        for (const jsonItem of parsedJson) {\n          jsonItem.myNewField = 1;\n        }\n        results.push(...parsedJson);\n      } else {\n        // If it's a single object\n        parsedJson.myNewField = 1;\n        results.push(parsedJson);\n      }\n    } catch (error) {\n      console.error('JSON parsing error:', error);\n    }\n  }\n}\n\nreturn results;"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          600,
          -40
        ],
        "id": "799a0714-dbf6-43aa-9b26-dad3d57b8131",
        "name": "Extract Email Json",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "fieldToSplitOut": "name, email, Title, Context",
          "options": {}
        },
        "type": "n8n-nodes-base.splitOut",
        "typeVersion": 1,
        "position": [
          780,
          -40
        ],
        "id": "7b237626-1496-46b4-9cfd-f8cd0729c8cc",
        "name": "Split Out"
      },
      {
        "parameters": {
          "batchSize": 4,
          "options": {}
        },
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 3,
        "position": [
          1020,
          -60
        ],
        "id": "4c67d6bf-fd6f-4858-a881-041fa3c064fc",
        "name": "Loop Over Items"
      },
      {
        "parameters": {
          "modelName": "models/gemini-2.5-pro-preview-06-05",
          "options": {
            "maxOutputTokens": 2048,
            "temperature": 0.3,
            "topP": 0.9
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          280,
          80
        ],
        "id": "0b3fda54-424a-44bb-8295-7a37a9e3a491",
        "name": "gemini 2.5 06-05"
      },
      {
        "parameters": {
          "workflowInputs": {
            "values": [
              {
                "name": "query"
              }
            ]
          }
        },
        "id": "e3edf77a-9edb-4387-9fcb-adad79a38041",
        "typeVersion": 1.1,
        "name": "mail_to_from_mcp",
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "position": [
          -600,
          20
        ]
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=You sent email information below json file.\n\n{{ $('Agent Sending Message').item.json.output }}",
          "options": {
            "systemMessage": "Briefly explain the content of the email you sent and to whom in one output.\n\nAlways write in a highly readable manner. Return markdown."
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          1420,
          -80
        ],
        "id": "4527a030-1b72-4563-b772-435d6c827e4f",
        "name": "AI Agent1",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "modelName": "models/gemini-1.5-pro",
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          1460,
          60
        ],
        "id": "db667e5d-821c-4d81-8daa-daf39cc17f01",
        "name": "gemini 1.5 pro"
      },
      {
        "parameters": {
          "jsCode": "return {\n  \"reply\": JSON.stringify($json.output)\n}\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1760,
          -80
        ],
        "id": "344afd1d-083c-4402-96f6-94281a7ed167",
        "name": "Code"
      },
      {
        "parameters": {
          "content": "## Pull Org Project Lists\n**organization id's value** should be replaced to api or user's id to distinguish the user.\n\nMaybe should be added to create api logic for each user.\n\nCurrent setup is targeting \"Atoms-Platform\" Organization.",
          "height": 360,
          "width": 400
        },
        "type": "n8n-nodes-base.stickyNote",
        "typeVersion": 1,
        "position": [
          -740,
          280
        ],
        "id": "d43bb216-890a-48a7-b33f-905ee9f0cc4f",
        "name": "Sticky Note"
      },
      {
        "parameters": {
          "operation": "getAll",
          "tableId": "organization_members",
          "returnAll": true,
          "filters": {
            "conditions": [
              {
                "keyName": "organization_id",
                "condition": "eq",
                "keyValue": "5eafad37-34ab-4221-a8a5-d3d4f5bdb5b9"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          -440,
          -100
        ],
        "id": "7d04024d-fc6b-4494-b5a7-c5396a481ce6",
        "name": "Pull organization members"
      },
      {
        "parameters": {
          "fieldToSplitOut": "user_id",
          "options": {}
        },
        "type": "n8n-nodes-base.splitOut",
        "typeVersion": 1,
        "position": [
          -320,
          80
        ],
        "id": "999fccfc-d76f-4ea7-afc1-ec02da99fa55",
        "name": "extract_user_id"
      },
      {
        "parameters": {
          "operation": "getAll",
          "tableId": "profiles",
          "returnAll": true,
          "filters": {
            "conditions": [
              {
                "keyName": "id",
                "condition": "eq",
                "keyValue": "={{ $json.user_id }}"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          -200,
          -100
        ],
        "id": "c1e7c255-cd8a-4e33-bc2e-df60930f1ec0",
        "name": "Load team member's profile"
      },
      {
        "parameters": {
          "fieldToSplitOut": "id, full_name, email",
          "options": {}
        },
        "type": "n8n-nodes-base.splitOut",
        "typeVersion": 1,
        "position": [
          -80,
          80
        ],
        "id": "c9016b30-ed03-4d0c-a23e-ba02b6bdf113",
        "name": "extract members' info"
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items and concatenate id, full_name, email into one string for output\nlet outputString = '';\n\nfor (const item of $input.all()) {\n  outputString += `id: ${item.json.id}, full_name: ${item.json.full_name}, email: ${item.json.email} \\n\\n`;\n}\n\n// Get the 'query' value from the first item of 'mail_to_from_mcp'\nconst query = $('mail_to_from_mcp').first().json.query;\n\n// Return the formatted result\nreturn [\n  {\n    profiles: outputString.trim(), // Concatenate and remove the last unnecessary newline\n    query: query\n  }\n];\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          40,
          -100
        ],
        "id": "5bd00414-0b6d-4641-bce2-323c465faca9",
        "name": "Under one output"
      },
      {
        "parameters": {
          "sendTo": "={{ $json.email }}",
          "subject": "={{ $json.Title }}",
          "emailType": "text",
          "message": "={{ $json.Context }}",
          "options": {}
        },
        "type": "n8n-nodes-base.gmail",
        "typeVersion": 2.1,
        "position": [
          1220,
          40
        ],
        "id": "af8ff614-e7a7-4e8c-a6b0-df734b7a1614",
        "name": "Send a message",
        "webhookId": "22813492-1279-4d04-9fe5-3686f0485c42"
      }
    ],
    "connections": {
      "Agent Sending Message": {
        "main": [
          [
            {
              "node": "Extract Email Json",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Email Json": {
        "main": [
          [
            {
              "node": "Split Out",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Loop Over Items": {
        "main": [
          [
            {
              "node": "AI Agent1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Send a message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "gemini 2.5 06-05": {
        "ai_languageModel": [
          [
            {
              "node": "Agent Sending Message",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "mail_to_from_mcp": {
        "main": [
          [
            {
              "node": "Pull organization members",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent1": {
        "main": [
          [
            {
              "node": "Code",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "gemini 1.5 pro": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent1",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Pull organization members": {
        "main": [
          [
            {
              "node": "extract_user_id",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "extract_user_id": {
        "main": [
          [
            {
              "node": "Load team member's profile",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Load team member's profile": {
        "main": [
          [
            {
              "node": "extract members' info",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "extract members' info": {
        "main": [
          [
            {
              "node": "Under one output",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Under one output": {
        "main": [
          [
            {
              "node": "Agent Sending Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Send a message": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "pinData": {
      "mail_to_from_mcp": [
        {
          "query": "Send an email to Jun regarding the recent changes and pull request for the requirements documents UI/UX improvements."
        }
      ]
    },
    "meta": {
      "instanceId": "d26b2a84234c2c4983f8b74ee4bb4d875412aeacbd4cd8b7cbaad7b8c7614526"
    }
  }