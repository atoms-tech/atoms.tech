{
    "nodes": [
      {
        "parameters": {
          "multipleMethods": true,
          "httpMethod": [
            "POST"
          ],
          "path": "agent_webhook",
          "responseMode": "responseNode",
          "options": {}
        },
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 2,
        "position": [
          -120,
          1900
        ],
        "id": "8169595b-0c1f-4bc9-8701-aec96edccf9f",
        "name": "Webhook",
        "webhookId": "3ba97027-8ffa-4258-b325-83fa8cf09024"
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "c1ab12f8-3171-489d-870b-c5721892e68e",
                      "leftValue": "={{ $json.output === \"1\" }}",
                      "rightValue": "=1",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "DB case"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "3f3978a5-6df5-4e9b-9ce0-ff2c440f8d68",
                      "leftValue": "={{ $json.output === \"2\" }}",
                      "rightValue": "=2",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "Web Search case"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "2954d490-9b69-4517-9296-91191c78cff8",
                      "leftValue": "={{ $json.output === \"3\" }}",
                      "rightValue": "=3",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "Message cases"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "1806d09e-5de2-4fe4-9ca8-d181ae7fb728",
                      "leftValue": "={{ $json.output === \"4\" }}",
                      "rightValue": "4",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "MISC"
              }
            ]
          },
          "looseTypeValidation": true,
          "options": {}
        },
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3.2,
        "position": [
          440,
          1880
        ],
        "id": "67e96e3a-e100-44ee-b93a-37f4ac376c13",
        "name": "Switch",
        "alwaysOutputData": false,
        "executeOnce": true,
        "notesInFlow": true,
        "onError": "continueRegularOutput"
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=Conversation History: {{ $json.conversation_history }}\nHuman's Current Message: {{ $json.body.message }}\nTask: Classify the human's request into one of the four categories and return the corresponding number (1, 2, 3, or 4).",
          "hasOutputParser": true,
          "options": {
            "systemMessage": "=System Message\nüéØ Task Overview\nYou are a classification system that categorizes user requests into one of four specific categories based on the type of action or information required.\nüìã Classification Categories\nCategory 1: Project/Member Information\n\nReturn: 1\nWhen to use: If the user's request requires checking project information or details about other members to provide an answer.\nExamples:\n\n\"List up all the requirement documents.\"\n\"Can you show all the projects?\"\n\"Show me details about team member John's projects\"\n\n\nCategory 2: External Information/Web Search\n\nReturn: 2\nWhen to use: If the human's request requires checking external information through a web searching function and providing an answer.\nExamples:\n\n\"What's the latest news about our industry?\"\n\"Find information about competitor pricing\"\n\"Search for current market trends\"\n\n\n\nCategory 3: Communication Actions\n\nReturn: 3\nWhen to use: If the human's request is to send an email or Slack message.\nExamples:\n\n\"Send an email to the team about the meeting\"\n\"Email the client about project updates\"\n\n\n\nCategory 4: All Other Cases\n\nReturn: 4\nWhen to use: For all other cases that don't fit into categories 1, 2, or 3.\nExamples:\n\n\nüîç Analysis Process\n\nRead the conversation history carefully\nUnderstand the human's current message context\nIdentify which category best fits the request\nReturn only the number (1, 2, 3, or 4)\n\nüì§ Output Format\nReturn only the classification number: 1, 2, 3, or 4"
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          160,
          1900
        ],
        "id": "bc831143-213b-418e-ba90-d5ce70d82182",
        "name": "Agent - Distinguishing User Cases",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "content": "# Distinguishing User Question\n## Agent first will classify from 1 to 4\n### **1** - The question which Agent needs to look up the Supabase table.\n### **2** - The question which Agent needs to web search for user.\n### **3** - The question which Agent needs to message to someone through slack or gmail.\n### **4** - If the question is not the case for 1,2,3, then pass to 4 and generate answer.",
          "height": 2240,
          "width": 1060
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          -420,
          600
        ],
        "typeVersion": 1,
        "id": "1f2297ad-89e0-49ae-a5b9-e52d7c1ffc3c",
        "name": "Sticky Note"
      },
      {
        "parameters": {
          "content": "\n\n\n\n\n# Case 4\n## Generate the answer current \n## question with conversation history.",
          "height": 380,
          "width": 2300,
          "color": 7
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          640,
          2460
        ],
        "typeVersion": 1,
        "id": "1c97e30c-98c5-4d86-9495-2b5ea48a81bc",
        "name": "Sticky Note1"
      },
      {
        "parameters": {
          "content": "# Case 3\n## Message to someone\n### **Gmail**\n### **Slack**",
          "height": 400,
          "width": 2300,
          "color": 6
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          640,
          2060
        ],
        "typeVersion": 1,
        "id": "72b1c585-8242-44c9-8253-d52bde584664",
        "name": "Sticky Note2"
      },
      {
        "parameters": {
          "content": "# Case 1\n## Case 1 should be classified more detaied.\n### 1 - Does user want to check Requirements documents?\n### 2 - Does user want to check Regulation Documents?\n",
          "height": 1180,
          "width": 820,
          "color": 3
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          4040,
          600
        ],
        "typeVersion": 1,
        "id": "b8e874db-dcdb-4bb4-8e65-bf10d0d86009",
        "name": "Sticky Note3"
      },
      {
        "parameters": {
          "content": "## Pulling Project's Regulation, Requirements documents Context\n",
          "height": 1180,
          "width": 3400,
          "color": 4
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          640,
          600
        ],
        "typeVersion": 1,
        "id": "d40bc57c-83ae-4420-8947-002f8d4b1127",
        "name": "Sticky Note4"
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=Here is the conversation between you and user.\n\nThrough this answer this user's current question.\n\n{{ $('Webhook').item.json.body.message }}",
          "hasOutputParser": true,
          "options": {
            "systemMessage": "Your name is \"Atom\" which is ai agent for our atoms.tech platform."
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          1220,
          2500
        ],
        "id": "1c5971af-084f-48fd-ac2f-d1667e622e62",
        "name": "Agent treating MISC",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "content": "# Case 2\n## WebSearch\n",
          "height": 280,
          "width": 4220,
          "color": 2
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          640,
          1780
        ],
        "typeVersion": 1,
        "id": "4ce42490-b001-4d92-a4ce-6d4b4ae53a6d",
        "name": "Sticky Note5"
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=If the information cannot be found, return \"email\": null.\n\nAnd here is user conversation and current user's request.\n\nConversation History: \"{{ $('Extract Conversation History').item.json.conversation_history }}\"\n\nUser's request: \"{{ $('Webhook').item.json.body.message }}\"\n\nIf the user wants to send an email, and the recipient's name and email can be found from the Conversation History and the User's request, return a JSON file with the following structure:\n[{\n  \"name\": \"the recipient's name\",\n  \"email\": \"the recipient's email\",\n  \"Title\": \"the email subject, containing sender's name: {{ $('Webhook').item.json.body.secureContext.username }}\",\n  \"Context\": \"the content the user wants to send\"\n}]\n",
          "hasOutputParser": true,
          "options": {
            "systemMessage": "You must return json format which user requested."
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          1220,
          2200
        ],
        "id": "dd2add2f-5284-48ba-af76-5f873b3025a9",
        "name": "Agent Sending Message",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"reply\": {{ JSON.stringify($json.output) }}\n}",
          "options": {
            "responseCode": 200
          }
        },
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1.3,
        "position": [
          2740,
          2200
        ],
        "id": "1d7bbd75-7335-4d7c-ac78-3e49f84c8324",
        "name": "Respond to Webhook Message Success"
      },
      {
        "parameters": {
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          1280,
          1880
        ],
        "id": "f23764bd-f888-4a5c-8393-415c51849735",
        "name": "AI Agent"
      },
      {
        "parameters": {
          "modelName": "models/gemini-2.5-flash-lite-preview-06-17",
          "options": {
            "maxOutputTokens": 2048,
            "temperature": 0.3,
            "topP": 0.9
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          1200,
          2660
        ],
        "id": "736cb283-4eae-4556-b44b-13fbb79d13bf",
        "name": "Google Gemini Chat Model2",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "modelName": "models/gemini-2.5-flash-preview-04-17-thinking",
          "options": {
            "maxOutputTokens": 2048,
            "temperature": 0.3,
            "topP": 0.9
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          1200,
          1980
        ],
        "id": "28df9ffd-8e38-4c6d-8435-f4aaf6fbd617",
        "name": "Google Gemini Chat Model4",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"reply\": {{ JSON.stringify($json.output) }}\n} ",
          "options": {}
        },
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1.3,
        "position": [
          1600,
          2500
        ],
        "id": "7d7032c4-c808-44f3-8648-436a68766a00",
        "name": "Respond to Webhook"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "7a32115c-8048-4a47-9bf8-a69f2cc8b186",
                "name": "body.message",
                "value": "={{ $('Webhook').item.json.body.message }}",
                "type": "string"
              },
              {
                "id": "fc0eb8ce-9ad7-4011-bbce-7a0a7432cb86",
                "name": "body.secureContext.username",
                "value": "={{ $('Webhook').item.json.body.secureContext.username }}",
                "type": "string"
              },
              {
                "id": "b16326f9-50d7-426e-941f-33d18d927bc8",
                "name": "conversation_history",
                "value": "={{ $('Webhook').item.json.body.conversationHistory }}",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          20,
          1900
        ],
        "id": "8a25f3b3-7de0-45d9-b4d8-7363e309e26a",
        "name": "Curr msg, Historical conversation"
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items and extract JSON from output field\nconst results = [];\n\nfor (const item of $input.all()) {\n  // Extract JSON content from the output field\n  const outputText = item.json.output;\n  \n  // Regular expression to extract content between ```json and ```\n  const jsonMatch = outputText.match(/```json\\n([\\s\\S]*?)\\n```/);\n  \n  if (jsonMatch) {\n    try {\n      // Parse the JSON string\n      const parsedJson = JSON.parse(jsonMatch[1]);\n      \n      // If it's an array, add myNewField to each item\n      if (Array.isArray(parsedJson)) {\n        for (const jsonItem of parsedJson) {\n          jsonItem.myNewField = 1;\n        }\n        results.push(...parsedJson);\n      } else {\n        // If it's a single object\n        parsedJson.myNewField = 1;\n        results.push(parsedJson);\n      }\n    } catch (error) {\n      console.error('JSON parsing error:', error);\n    }\n  }\n}\n\nreturn results;"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1520,
          2200
        ],
        "id": "9e727524-7b38-4384-a81b-cba057b8fee2",
        "name": "Extract Email Json",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=You sent email information below json file.\n\n{{ $('Agent Sending Message').item.json.output }}",
          "options": {
            "systemMessage": "Briefly explain the content of the email you sent and to whom in one output.\n\nAlways write in a highly readable manner."
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          2360,
          2200
        ],
        "id": "49723111-7cea-44a2-a2a4-36ad43f89b02",
        "name": "AI Agent1",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"reply\": \"Case2\"\n}",
          "options": {
            "responseCode": 200
          }
        },
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1.3,
        "position": [
          1620,
          1880
        ],
        "id": "94123995-e05d-41b0-82bb-9dd458f3189c",
        "name": "Respond to Webhook Message Success1"
      },
      {
        "parameters": {
          "modelName": "models/gemini-1.5-pro",
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          2400,
          2340
        ],
        "id": "892a00c1-c452-4f2a-8980-7d4d714546a6",
        "name": "gemini 1.5 pro",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "fieldToSplitOut": "name, email, Title, Context",
          "options": {}
        },
        "type": "n8n-nodes-base.splitOut",
        "typeVersion": 1,
        "position": [
          1700,
          2200
        ],
        "id": "e5fb7454-9bdc-416d-bbef-7e52036a7874",
        "name": "Split Out"
      },
      {
        "parameters": {
          "batchSize": 4,
          "options": {}
        },
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 3,
        "position": [
          1940,
          2180
        ],
        "id": "8e9a29b0-8219-4c73-afb1-0c7601ecaa34",
        "name": "Loop Over Items"
      },
      {
        "parameters": {
          "modelName": "models/gemini-2.5-pro-preview-06-05",
          "options": {
            "maxOutputTokens": 2048,
            "temperature": 0.3,
            "topP": 0.9
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          1200,
          2320
        ],
        "id": "08d7761a-8a26-4aec-a082-c2b7ec22e59c",
        "name": "gemini 2.5 06-05",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "description": "Call this tool, if the user requests to send an email.",
          "workflowId": {
            "__rl": true,
            "value": "uoiO5nDu5jKUGH7U",
            "mode": "list",
            "cachedResultName": "Atoms MCP & AI AGENT ‚Äî mail_to"
          },
          "workflowInputs": {
            "mappingMode": "defineBelow",
            "value": {},
            "matchingColumns": [
              "query"
            ],
            "schema": [
              {
                "id": "query",
                "displayName": "query",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "canBeUsedToMatch": true,
                "type": "string",
                "removed": false
              }
            ],
            "attemptToConvertTypes": false,
            "convertFieldsToString": false
          }
        },
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "typeVersion": 2.2,
        "position": [
          -240,
          180
        ],
        "id": "06f1990e-fb2a-42df-80b3-1f8e292c575f",
        "name": "mail_to",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "description": "Call this tool if user want to check, list up or retrieve detailed information about our project's requirement documents. It provides an overview of all relevant requirements, including fields, lists, and the current status of ongoing tasks, ensuring you stay updated on the project's overall progress and specific details.",
          "workflowId": {
            "__rl": true,
            "value": "ov9PJH6HqAXdLa4P",
            "mode": "list",
            "cachedResultName": "Atoms MCP & AI AGENT ‚Äî project_overview"
          },
          "workflowInputs": {
            "mappingMode": "defineBelow",
            "value": {},
            "matchingColumns": [
              "query"
            ],
            "schema": [
              {
                "id": "query",
                "displayName": "query",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "canBeUsedToMatch": true,
                "type": "string"
              }
            ],
            "attemptToConvertTypes": false,
            "convertFieldsToString": false
          }
        },
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "typeVersion": 2.2,
        "position": [
          -120,
          180
        ],
        "id": "6a231b0e-7357-40cb-ad01-1af68b77c541",
        "name": "check_projects",
        "alwaysOutputData": true
      },
      {
        "parameters": {},
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "typeVersion": 2.2,
        "position": [
          380,
          80
        ],
        "id": "df9eef25-e5c2-45b1-845b-17b2a0342f9a",
        "name": "check_regulation",
        "disabled": true
      },
      {
        "parameters": {},
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "typeVersion": 2.2,
        "position": [
          500,
          200
        ],
        "id": "26403fde-f9fe-4928-a0a0-7cc580e3a002",
        "name": "check_team_members",
        "disabled": true
      },
      {
        "parameters": {},
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "typeVersion": 2.2,
        "position": [
          620,
          80
        ],
        "id": "1e6af03c-9497-4c4a-a555-2747884e2560",
        "name": "invite_to_org",
        "disabled": true
      },
      {
        "parameters": {
          "path": "9a0935c9-9e31-4149-9264-3224ef61d193"
        },
        "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
        "typeVersion": 1,
        "position": [
          -380,
          0
        ],
        "id": "90ea48b8-09a3-463d-8161-038e7d8a3f94",
        "name": "Atoms MCP Server",
        "webhookId": "9a0935c9-9e31-4149-9264-3224ef61d193"
      },
      {
        "parameters": {
          "sendTo": "={{ $json.email }}",
          "subject": "={{ $json.Title }}",
          "emailType": "text",
          "message": "={{ $json.Context }}",
          "options": {}
        },
        "type": "n8n-nodes-base.gmail",
        "typeVersion": 2.1,
        "position": [
          2140,
          2280
        ],
        "id": "1bf8acde-4a46-47a9-853e-51604d00d2aa",
        "name": "Send a message",
        "webhookId": "22813492-1279-4d04-9fe5-3686f0485c42",
        "disabled": true
      },
      {
        "parameters": {
          "description": "Call this tool, if user want to check the connection with Atom MCP.",
          "jsCode": "// Example: convert the incoming query to uppercase and return it\nreturn \"Connected\""
        },
        "type": "@n8n/n8n-nodes-langchain.toolCode",
        "typeVersion": 1.2,
        "position": [
          -360,
          180
        ],
        "id": "5402d406-46b9-4bcf-b8f5-37c540cfd883",
        "name": "Test_Connect"
      },
      {
        "parameters": {
          "fieldToSplitOut": "id, document_id, type, content.text, position",
          "options": {}
        },
        "type": "n8n-nodes-base.splitOut",
        "typeVersion": 1,
        "position": [
          3300,
          1280
        ],
        "id": "a8910a4b-15d6-40b1-aa9a-06833bb1ea8b",
        "name": "Split Out - ids,context.text",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "operation": "getAll",
          "tableId": "requirements",
          "returnAll": true,
          "filters": {
            "conditions": [
              {
                "keyName": "document_id",
                "condition": "eq",
                "keyValue": "={{ $json.target_document_ids }}"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          3000,
          1440
        ],
        "id": "be653c18-f7b9-4ebd-8311-3e776a5ad10d",
        "name": "Get Tables",
        "alwaysOutputData": true,
        "executeOnce": false,
        "credentials": {
          "supabaseApi": {
            "id": "4T7K0ALnwHMmf2mr",
            "name": "Supabase account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "const keysToRemove = [\n  \"format\",\n  \"level\",\n  \"tags\",\n  \"position\",\n  \"type\",\n  \"original_requirement\",\n  \"enchanced_requirement\",\n  \"ai_analysis\",\n  \"created_at\",\n  \"updated_at\",\n  \"created_by\",\n  \"updated_by\",\n  \"version\",\n  \"is_deleted\",\n  \"deleted_at\",\n  \"deleted_by\",\n  \"properties\",\n];\n\nfor (const item of $input.all()) {\n  if (item.json && typeof item.json === 'object') {\n    if (item.json.properties && item.json.properties.Email && item.json.properties.Email.value) {\n      item.json.email = item.json.properties.Email.value;\n    }\n    \n    for (const key of keysToRemove) {\n      delete item.json[key];\n    }\n  }\n}\n\nreturn $input.all();"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          3180,
          1440
        ],
        "id": "0cc68040-fa93-4854-8208-26191ae99236",
        "name": "Refine param from Table",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "operation": "getAll",
          "tableId": "blocks",
          "returnAll": true,
          "filters": {
            "conditions": [
              {
                "keyName": "document_id",
                "condition": "eq",
                "keyValue": "={{ $json.target_document_ids }}"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          3000,
          1240
        ],
        "id": "15573873-cc4d-452d-a733-04edfca59879",
        "name": "blocks & text_from_document_ids",
        "executeOnce": false,
        "alwaysOutputData": true,
        "credentials": {
          "supabaseApi": {
            "id": "4T7K0ALnwHMmf2mr",
            "name": "Supabase account"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "advanced": true,
          "mergeByFields": {
            "values": [
              {
                "field1": "document_id",
                "field2": "document_id"
              }
            ]
          },
          "joinMode": "enrichInput1",
          "options": {}
        },
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.2,
        "position": [
          3480,
          1240
        ],
        "id": "130a19c1-0883-4bea-8499-d77395a0042c",
        "name": "Project < Documents < Blocks",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "mode": "combine",
          "fieldsToMatchString": "document_id",
          "joinMode": "keepEverything",
          "options": {}
        },
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.2,
        "position": [
          3580,
          1440
        ],
        "id": "4010f9d9-25d1-49d2-887c-706cf9b4ca11",
        "name": "Project < Documents < Blocks < Tables",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "jsonSchemaExample": "[\n  {\n  \t\"target_document_ids\": \"adsfadgadsg1\"\n  }\n]"
        },
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "typeVersion": 1.2,
        "position": [
          2700,
          1440
        ],
        "id": "f6bf890a-7dae-4d48-b891-8c1237fe77a4",
        "name": "Structured Output Parser2",
        "notesInFlow": true
      },
      {
        "parameters": {
          "jsCode": "const document_names = $input.all().map(item => item.json.document_name);\n\nconst document_ids = $input.all().map(item => item.json.document_id);\n\nconst document_description = $input.all().map(item => item.json.document_description);\n\n\nreturn [\n  {\n    json: {\n      document_ids: document_ids,\n      document_names: document_names,\n      document_descriptions: document_description,\n      message: $('Webhook').first().json.body.message\n    }\n  }\n];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          2320,
          1480
        ],
        "id": "a9cb0ffa-b9b0-4995-8455-f6ba920d4343",
        "name": "Extract document's ids"
      },
      {
        "parameters": {
          "mode": "combine",
          "advanced": true,
          "mergeByFields": {
            "values": [
              {
                "field1": "document_id",
                "field2": "target_document_ids"
              }
            ]
          },
          "outputDataFrom": "input1",
          "options": {}
        },
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.2,
        "position": [
          3000,
          1060
        ],
        "id": "b04c1ee2-9d20-483a-b1b4-da36ca32d529",
        "name": "Extract selected document",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "jsCode": "// Helper function to convert JSON object to markdown string\nfunction jsonToMarkdown(jsonObj) {\n    let markdown = '';\n    \n    // Keys to exclude from markdown conversion\n    const excludedKeys = ['organization_id', 'project_id', 'id', 'document_id', 'block_id'];\n    \n    for (const [key, value] of Object.entries(jsonObj)) {\n        // Skip excluded keys\n        if (excludedKeys.includes(key)) {\n            continue;\n        }\n        \n        markdown += `**${key}**: `;\n        \n        if (typeof value === 'string') {\n            markdown += `${value}\\n`;\n        } else if (typeof value === 'number' || typeof value === 'boolean') {\n            markdown += `${value}\\n`;\n        } else if (value === null) {\n            markdown += `null\\n`;\n        } else if (typeof value === 'object') {\n            markdown += `\\n${JSON.stringify(value, null, 2)}\\n`;\n        } else {\n            markdown += `${value}\\n`;\n        }\n    }\n    \n    return markdown;\n}\n\n// Collect all markdown strings from each item.json\nlet allDocumentsMarkdown = '';\n\nfor (const item of $input.all()) {\n    // Convert each item.json to markdown\n    const markdownString = jsonToMarkdown(item.json);\n    \n    // Add to the combined string with double newlines between items\n    if (allDocumentsMarkdown !== '') {\n        allDocumentsMarkdown += '\\n\\n';\n    }\n    allDocumentsMarkdown += markdownString;\n}\n\n// Return new array with single object containing all documents as markdown\nreturn [{\"all_documents\": allDocumentsMarkdown}];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          3740,
          1440
        ],
        "id": "34c84eae-cddb-471a-a974-610e2d94a35c",
        "name": "Return to User",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=This is human's organizations requirements documents.\n---\nrequirement documents: {{ $json.all_documents }}\n---\nThis is human's name: {{ $json.username }}\n---\nAnd this is human's request.\nrequest: {{ $json.message }}\n---\nAnd this is the conversation history between you and human.\nhistory: {{ $json.conversation_history }}\n---",
          "options": {
            "systemMessage": "# System Prompt for LLM\n\n## Purpose:\nThe goal is to ensure that the LLM (Large Language Model) effectively reviews the human's organization's requirement documents, understands the human's question, and provides a clear, concise, and relevant answer based on the documents. The response should be understandable and easy to follow.\n\n## Task Instructions:\n\n1. **Review All Documents**:\n    - The LLM should **examine the `requirement_documents`** carefully. This is crucial as the answer to the human‚Äôs question must be based on the contents of these documents. The LLM should ensure the information used in the response is drawn directly from these documents.\n\n2. **Understand the human's Request**:\n    - The LLM must carefully read and understand the human‚Äôs question (`question`). Consider the language, tone, and context of the question to ensure a comprehensive understanding of what the human is asking.\n    - **Key Actions**:\n        - Identify the main request of the human (e.g., clarification, explanation, specific information).\n        - Cross-reference with the requirement documents to find the most relevant information.\n\n3. **Formulate the Response**:\n    - **Concise and Clean**: Ensure the response is direct and avoids unnecessary complexity. The answer should be understandable and to the point.\n    - **Relevance**: The response must be based strictly on the `requirement_documents`. Use the relevant document content to answer the human's request.\n    - **Clarity**: Write in a way that‚Äôs easy to follow and free of jargon (unless it‚Äôs necessary and explained).\n\n4. **Ensure Accuracy**:\n    - When answering, double-check the accuracy of the information from the documents. If there are multiple options or pieces of information, select the one most relevant to the human's needs.\n    - If the human‚Äôs question cannot be fully answered due to lack of information, respond politely and state what additional information is needed, referencing the documents as necessary."
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          4260,
          1600
        ],
        "id": "9784eb96-cde1-4cd6-8fe6-98b84d9d849a",
        "name": "Agent Checked DB2",
        "alwaysOutputData": true
      },
      {
        "parameters": {},
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.2,
        "position": [
          3900,
          1600
        ],
        "id": "6afc8446-5ae6-4d00-ac60-b0a21480a0d1",
        "name": "Merge",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "jsCode": "// Merge all input items into a single object\nconst inputItems = $input.all();\nconst mergedData = {};\n// Process each item and merge into single object\nfor (const item of inputItems) {\n  // If item has all_documents, add it to merged data\n  if (item.json.all_documents) {\n    mergedData.all_documents = item.json.all_documents;\n  }\n\n  // If item has body structure, extract and add to merged data\n  if (item.json.body) {\n    mergedData.message = item.json.body.message || null;\n    mergedData.username = item.json.body.secureContext?.username || null;\n  }\n\n  // If item has conversation_history, add to merged data\n  if (item.json.conversation_history) {\n    mergedData.conversation_history = item.json.conversation_history;\n  }\n\n  // Also check for direct properties in case they exist\n  if (item.json.message) {\n    mergedData.message = item.json.message;\n  }\n  if (item.json.username) {\n    mergedData.username = item.json.username;\n  }\n}\n// Return as a single item array\nreturn [{ json: mergedData }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          4040,
          1600
        ],
        "id": "e7a654ba-0c37-44ec-a647-6698cca9b9cb",
        "name": "Code",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items\nlet result = [];\n\n// Loop through all items\nfor (const item of $input.all()) {\n  // Ensure 'output' exists and is an array\n  if (item.json.output && Array.isArray(item.json.output)) {\n    // Extract target_document_ids from the output array\n    const targetDocumentIds = item.json.output.map(o => ({ target_document_ids: o.target_document_ids }));\n    \n    // Add the extracted target_document_ids to the result\n    result = result.concat(targetDocumentIds);\n  }\n}\n\n// Return the transformed result\nreturn result;\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          2820,
          1240
        ],
        "id": "a19fca70-9082-469e-8945-18295ba79565",
        "name": "extract target_project_ids1"
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=**document_ids**: {{ $json.document_ids }}\n\n**document_names**: {{ $json.document_names }}\n\n**project_descriptions**: {{ $json.document_descriptions }}\n\n**human's message**: {{ $json.message }}",
          "hasOutputParser": true,
          "options": {
            "systemMessage": "# üîß System Prompt\n\nThe data contains three key components:\n\n- **`document_ids`**: A list of unique identifiers for each document. Each document is assigned a unique ID for identification.\n- **`document_names`**: A list of names corresponding to each document. Each document has a name that can be used to identify it more easily.\n- **`document_descriptions`**: A list of descriptions corresponding to each document. These descriptions provide additional details or context about each document. Note that some descriptions may be null, indicating that no description is available for that document.\n\nEach of these lists corresponds to each other in a 1-to-1 relationship. That means:\n\n- The first `document_id` corresponds to the first `document_name` and the first `document_description`.\n- The second `document_id` corresponds to the second `document_name` and the second `document_description`.\n- And so on...\n\n---\n\n## ‚úÖ Your Task\n1. **Review** the `document_names` and `document_descriptions` provided above.\n2. **Understand** the human's message or requirements.\n3. **Identify** the most relevant documents by matching their names and descriptions with the human's message.\n4. If you can't distinguish just return all.\n\n---\n\n## üéØ Selection Rule\n\n- If the human wants to **review all document requirements**,  \n  ‚Üí **Return all `document_ids`**.\n\n- If the human is interested in **only specific documents**,  \n  ‚Üí **Return only the `document_ids`** that best match the user's needs.\n\n---\n\n## üîÅ Output Format\n\nReturn the selected `target_document_ids` as a **list**.\n"
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          2520,
          1240
        ],
        "id": "47ba1a90-b5c3-4f2e-adf8-03c713f7660e",
        "name": "Extracting Documents ids",
        "alwaysOutputData": true,
        "executeOnce": true,
        "retryOnFail": true,
        "maxTries": 5,
        "waitBetweenTries": 100
      },
      {
        "parameters": {
          "jsCode": "// Return only items where type is \"text\"\nreturn $input.all().filter(item => item.json.type === \"text\");"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          3160,
          1280
        ],
        "id": "7c258848-8a41-40e0-a27c-2a043f44c748",
        "name": "Filtering Text"
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"reply\": {{ JSON.stringify($json.output) }}\n}",
          "options": {}
        },
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1.3,
        "position": [
          4620,
          1600
        ],
        "id": "c082f2c4-1350-4ce3-b550-4a12f4ac5c21",
        "name": "Respond to Webhook - DB",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "fieldToSplitOut": "id, project_id, name, description",
          "options": {}
        },
        "type": "n8n-nodes-base.splitOut",
        "typeVersion": 1,
        "position": [
          1680,
          1220
        ],
        "id": "a98e7056-5072-40b4-a463-a7559f8bed2f",
        "name": "Split Out1"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "901498bf-70a5-44d3-8aee-8e25bca1be7f",
                "name": "document_id",
                "value": "={{ $json.id }}",
                "type": "string"
              },
              {
                "id": "625e3bc4-d13a-4ff3-a38c-886bd576d70e",
                "name": "document_name",
                "value": "={{ $json.name }}",
                "type": "string"
              },
              {
                "id": "a215a6f3-98a0-4403-b53a-b2807c906dd6",
                "name": "document_description",
                "value": "={{ $json.description }}",
                "type": "string"
              },
              {
                "id": "f393e65e-2878-45cf-b496-709aca653854",
                "name": "project_id",
                "value": "={{ $json.project_id }}",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          1820,
          1340
        ],
        "id": "1e6d597d-89cb-4c4d-8b8e-5ff14a3b428f",
        "name": "Edit Fields"
      },
      {
        "parameters": {
          "useCustomSchema": true,
          "operation": "get",
          "tableId": "projects",
          "filters": {
            "conditions": [
              {
                "keyName": "organization_id",
                "keyValue": "={{ $('Webhook').item.json.body.secureContext.pinnedOrganizationId }}"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          760,
          1580
        ],
        "id": "f833552c-0f71-41b6-95a8-90c3e9e5037a",
        "name": "Pull Org Project Lists",
        "alwaysOutputData": true,
        "credentials": {
          "supabaseApi": {
            "id": "4T7K0ALnwHMmf2mr",
            "name": "Supabase account"
          }
        }
      },
      {
        "parameters": {
          "useCustomSchema": true,
          "operation": "getAll",
          "tableId": "documents",
          "returnAll": true,
          "filters": {
            "conditions": [
              {
                "keyName": "project_id",
                "condition": "eq",
                "keyValue": "={{ $json.target_project_ids }}"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.supabase",
        "typeVersion": 1,
        "position": [
          1540,
          1340
        ],
        "id": "078973dc-c65d-44fb-89a4-d11a1e1b9f26",
        "name": "Get Documents from Selected Project",
        "alwaysOutputData": true,
        "credentials": {
          "supabaseApi": {
            "id": "4T7K0ALnwHMmf2mr",
            "name": "Supabase account"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "advanced": true,
          "mergeByFields": {
            "values": [
              {
                "field1": "project_id",
                "field2": "id"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.2,
        "position": [
          2000,
          1460
        ],
        "id": "57f0eaab-d861-4754-b8e8-39d32d5d8c5a",
        "name": "Merge: Project + documents"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "75c48f75-3528-49d2-9746-039592cb2cfd",
                "name": "project_id",
                "value": "={{ $json.project_id }}",
                "type": "string"
              },
              {
                "id": "a0632af5-66b0-4dad-8040-970fefaecbf1",
                "name": "project_name",
                "value": "={{ $json.name }}",
                "type": "string"
              },
              {
                "id": "c1af94ad-afad-4e3e-9bb4-53bf213d48ed",
                "name": "project_description",
                "value": "={{ $json.description }}",
                "type": "string"
              },
              {
                "id": "21bf6cd9-d1ab-4511-a556-feabffdcb8f6",
                "name": "document_id",
                "value": "={{ $json.document_id }}",
                "type": "string"
              },
              {
                "id": "4d0d00c5-5d84-468c-815c-eb76c5a3c0c2",
                "name": "document_name",
                "value": "={{ $json.document_name }}",
                "type": "string"
              },
              {
                "id": "dcdb38dc-49e4-4a43-b1e6-8a4a68e727ce",
                "name": "document_description",
                "value": "={{ $json.document_description }}",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          2160,
          1260
        ],
        "id": "cf386ebd-4c8e-42f6-bb2a-5e57c1718604",
        "name": "set: projects, documents"
      },
      {
        "parameters": {
          "modelName": "models/gemini-2.5-flash-lite-preview-06-17",
          "options": {
            "maxOutputTokens": 500,
            "temperature": 0.3,
            "topP": 0.9
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          160,
          2080
        ],
        "id": "4b579384-ae88-40ea-a392-42a2aa3ef2a5",
        "name": "gemini 2.5 flash lite preview",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Extract the 'name' values from the input\nconst names = $input.all().map(item => item.json.name);\n\n// Extract the 'id' values from the input\nconst ids = $input.all().map(item => item.json.id);\n\nconst description = $input.all().map(item => item.json.description);\n\n\nreturn [\n  {\n    json: {\n      project_ids: ids,\n      project_names: names,\n      project_descriptions: description,\n      user_question: $('Curr msg, Historical conversation').first().json.body.message\n    }\n  }\n];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          880,
          1400
        ],
        "id": "5f011bef-a060-46bb-ac2c-4d6f961dff8e",
        "name": "Extract Project's ids",
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=**project_ids**: {{ $('Extract Project\\'s ids').item.json.project_ids }}\n\n**project_names**: {{ $('Extract Project\\'s ids').item.json.project_names }}\n\n**project_descriptions**: {{ $('Extract Project\\'s ids').item.json.project_descriptions }}\n\n**human's message**: {{ $json.user_question }}",
          "hasOutputParser": true,
          "options": {
            "systemMessage": "=# üîß System Prompt\n\nThe data contains three key components:\n\n- **`project_ids`**: A list of unique identifiers for each project. Each project is assigned a unique ID for identification.\n- **`project_names`**: A list of names corresponding to each project. Each project has a name that can be used to identify it more easily.\n- **`project_descriptions`**: A list of descriptions corresponding to each project. These descriptions provide additional details or context about each project. Note that some descriptions may be null, indicating that no description is available for that project.\n\nEach of these lists corresponds to each other in a 1-to-1 relationship. That means:\n\n- The first `project_id` corresponds to the first `project_name` and the first `project_description`.\n- The second `project_id` corresponds to the second `project_name` and the second `project_description`.\n- And so on...\n\n---\n\n## ‚úÖ Your Task\n\nBased on the human's goal, you need to:\n\n1. **Review** the `project_names` and `project_descriptions` provided above.\n2. **Understand** the human's goal or requirements.\n3. **Identify** the most relevant projects by matching their names and descriptions with the human's intent.\n\n---\n\n## üéØ Selection Rule\n\n- If the human wants to **review all project requirements**,  \n  ‚Üí **Return all `project_ids`**.\n\n- If the human is interested in **only specific projects**,  \n  ‚Üí **Return only the `project_ids`** that best match the human's needs.\n\n---\n\n## üîÅ Output Format\n\nReturn the selected `target_project_ids` as a **list**.\nIf you can't distinguish just return all.\n\nImportant: When returning the project_ids, DO NOT introduce any typos or errors in the IDs. Ensure that the exact project_id values from the list are returned without any modification. A typo in the project_id can lead to serious issues, so it is crucial to preserve accuracy.\n\n"
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          1060,
          1320
        ],
        "id": "e798f823-7f5a-4044-a780-b4326e0b4aab",
        "name": "Agent Checked DB",
        "alwaysOutputData": true,
        "executeOnce": true,
        "retryOnFail": true,
        "maxTries": 5
      },
      {
        "parameters": {
          "jsonSchemaExample": "[\n  {\n  \t\"target_project_ids\": \"adsfadgadsg1\"\n  }\n]"
        },
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "typeVersion": 1.2,
        "position": [
          1240,
          1460
        ],
        "id": "1dbd1720-7520-41e4-b510-a4afa6f75f55",
        "name": "Structured Output Parser",
        "notesInFlow": true
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items\nlet result = [];\n\n// Loop through all items\nfor (const item of $input.all()) {\n  // Ensure 'output' exists and is an array\n  if (item.json.output && Array.isArray(item.json.output)) {\n    // Extract target_project_ids from the output array\n    const targetProjectIds = item.json.output.map(o => ({ target_project_ids: o.target_project_ids }));\n    \n    // Add the extracted target_project_ids to the result\n    result = result.concat(targetProjectIds);\n  }\n}\n\n// Return the transformed result\nreturn result;\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1380,
          1220
        ],
        "id": "b7dc1e2e-c61a-4868-a880-77562ba031b5",
        "name": "extract target_project_ids"
      },
      {
        "parameters": {
          "modelName": "models/gemini-2.5-flash-lite-preview-06-17",
          "options": {
            "maxOutputTokens": 2048,
            "temperature": 0.3,
            "topP": 0.9
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          2520,
          1440
        ],
        "id": "430fcb31-1dc3-489e-8e02-6ee7a7ad5066",
        "name": "gemini 2.5 flash lite",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "modelName": "models/gemini-2.5-pro",
          "options": {
            "maxOutputTokens": 1000000,
            "temperature": 0.3,
            "topP": 0.9
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          4280,
          1760
        ],
        "id": "4db65acf-afa1-4648-bf5b-07464908e3fa",
        "name": "gemini 2.5 flash1",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      },
      {
        "parameters": {
          "modelName": "models/gemini-2.5-flash-lite-preview-06-17",
          "options": {
            "maxOutputTokens": 2048,
            "temperature": 0.3,
            "topP": 0.9
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          1080,
          1460
        ],
        "id": "27cc0f74-5999-42a8-9976-07e24a45f55d",
        "name": "gemini 2.5 flash lite1",
        "credentials": {
          "googlePalmApi": {
            "id": "4cUrFs3WHQ9IQCld",
            "name": "Google Gemini(PaLM) Api account"
          }
        }
      }
    ],
    "connections": {
      "Webhook": {
        "main": [
          [
            {
              "node": "Curr msg, Historical conversation",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Switch": {
        "main": [
          [
            {
              "node": "Pull Org Project Lists",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Agent Sending Message",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Agent treating MISC",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Agent - Distinguishing User Cases": {
        "main": [
          [
            {
              "node": "Switch",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Agent treating MISC": {
        "main": [
          [
            {
              "node": "Respond to Webhook",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Agent Sending Message": {
        "main": [
          [
            {
              "node": "Extract Email Json",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent": {
        "main": [
          [
            {
              "node": "Respond to Webhook Message Success1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Gemini Chat Model2": {
        "ai_languageModel": [
          [
            {
              "node": "Agent treating MISC",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Google Gemini Chat Model4": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Curr msg, Historical conversation": {
        "main": [
          [
            {
              "node": "Agent - Distinguishing User Cases",
              "type": "main",
              "index": 0
            },
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Extract Email Json": {
        "main": [
          [
            {
              "node": "Split Out",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent1": {
        "main": [
          [
            {
              "node": "Respond to Webhook Message Success",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "gemini 1.5 pro": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent1",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Split Out": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Loop Over Items": {
        "main": [
          [
            {
              "node": "AI Agent1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Send a message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "gemini 2.5 06-05": {
        "ai_languageModel": [
          [
            {
              "node": "Agent Sending Message",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "mail_to": {
        "ai_tool": [
          [
            {
              "node": "Atoms MCP Server",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "check_projects": {
        "ai_tool": [
          [
            {
              "node": "Atoms MCP Server",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "check_regulation": {
        "ai_tool": [
          [
            {
              "node": "Atoms MCP Server",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "check_team_members": {
        "ai_tool": [
          [
            {
              "node": "Atoms MCP Server",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "invite_to_org": {
        "ai_tool": [
          [
            {
              "node": "Atoms MCP Server",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Send a message": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Test_Connect": {
        "ai_tool": [
          [
            {
              "node": "Atoms MCP Server",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Split Out - ids,context.text": {
        "main": [
          [
            {
              "node": "Project < Documents < Blocks",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Get Tables": {
        "main": [
          [
            {
              "node": "Refine param from Table",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Refine param from Table": {
        "main": [
          [
            {
              "node": "Project < Documents < Blocks < Tables",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "blocks & text_from_document_ids": {
        "main": [
          [
            {
              "node": "Filtering Text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Project < Documents < Blocks": {
        "main": [
          [
            {
              "node": "Project < Documents < Blocks < Tables",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Project < Documents < Blocks < Tables": {
        "main": [
          [
            {
              "node": "Return to User",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser2": {
        "ai_outputParser": [
          [
            {
              "node": "Extracting Documents ids",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Extract document's ids": {
        "main": [
          [
            {
              "node": "Extracting Documents ids",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract selected document": {
        "main": [
          [
            {
              "node": "Project < Documents < Blocks",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Return to User": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Agent Checked DB2": {
        "main": [
          [
            {
              "node": "Respond to Webhook - DB",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge": {
        "main": [
          [
            {
              "node": "Code",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Code": {
        "main": [
          [
            {
              "node": "Agent Checked DB2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "extract target_project_ids1": {
        "main": [
          [
            {
              "node": "blocks & text_from_document_ids",
              "type": "main",
              "index": 0
            },
            {
              "node": "Get Tables",
              "type": "main",
              "index": 0
            },
            {
              "node": "Extract selected document",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Extracting Documents ids": {
        "main": [
          [
            {
              "node": "extract target_project_ids1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filtering Text": {
        "main": [
          [
            {
              "node": "Split Out - ids,context.text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out1": {
        "main": [
          [
            {
              "node": "Edit Fields",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Edit Fields": {
        "main": [
          [
            {
              "node": "Merge: Project + documents",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Pull Org Project Lists": {
        "main": [
          [
            {
              "node": "Merge: Project + documents",
              "type": "main",
              "index": 1
            },
            {
              "node": "Extract Project's ids",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Documents from Selected Project": {
        "main": [
          [
            {
              "node": "Split Out1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge: Project + documents": {
        "main": [
          [
            {
              "node": "set: projects, documents",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "set: projects, documents": {
        "main": [
          [
            {
              "node": "Extract document's ids",
              "type": "main",
              "index": 0
            },
            {
              "node": "Extract selected document",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "gemini 2.5 flash lite preview": {
        "ai_languageModel": [
          [
            {
              "node": "Agent - Distinguishing User Cases",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Extract Project's ids": {
        "main": [
          [
            {
              "node": "Agent Checked DB",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Agent Checked DB": {
        "main": [
          [
            {
              "node": "extract target_project_ids",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Agent Checked DB",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "extract target_project_ids": {
        "main": [
          [
            {
              "node": "Get Documents from Selected Project",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "gemini 2.5 flash lite": {
        "ai_languageModel": [
          [
            {
              "node": "Extracting Documents ids",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "gemini 2.5 flash1": {
        "ai_languageModel": [
          [
            {
              "node": "Agent Checked DB2",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "gemini 2.5 flash lite1": {
        "ai_languageModel": [
          [
            {
              "node": "Agent Checked DB",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      }
    },
    "pinData": {},
    "meta": {
      "instanceId": "d26b2a84234c2c4983f8b74ee4bb4d875412aeacbd4cd8b7cbaad7b8c7614526"
    }
  }