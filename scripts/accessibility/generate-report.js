#!/usr/bin/env node

/**
 * Accessibility Report Generator
 * 
 * Generates comprehensive accessibility reports from test results
 * Supports multiple output formats: HTML, JSON, Markdown, XML
 */

const fs = require('fs').promises;
const path = require('path');
const chalk = require('chalk');

class AccessibilityReportGenerator {
  constructor(options = {}) {
    this.options = {
      inputDir: options.inputDir || 'test-results/accessibility',
      outputDir: options.outputDir || 'reports/accessibility',
      browser: options.browser || 'chromium',
      format: options.format ? options.format.split(',') : ['html', 'json', 'markdown'],
      includeDetails: options.includeDetails !== false,
      includeTrends: options.includeTrends !== false,
      ...options
    };
    
    this.reportData = {
      metadata: {},
      summary: {},
      toolResults: {},
      issues: [],
      recommendations: [],
      trends: {}
    };
  }
  
  /**
   * Main report generation method
   */
  async generate() {
    console.log(chalk.blue('📊 Generating accessibility report...'));
    
    try {
      // Ensure output directory exists
      await fs.mkdir(this.options.outputDir, { recursive: true });
      
      // Collect all test results
      await this.collectTestResults();
      
      // Analyze and process data
      await this.processData();
      
      // Generate reports in requested formats
      await this.generateReports();
      
      console.log(chalk.green('✅ Accessibility report generated successfully'));
      console.log(chalk.gray(`Reports saved to: ${this.options.outputDir}`));
      
    } catch (error) {
      console.error(chalk.red('❌ Report generation failed:'), error);
      throw error;
    }
  }
  
  /**
   * Collect test results from all tools
   */
  async collectTestResults() {
    console.log(chalk.cyan('📥 Collecting test results...'));
    
    // Collect Axe results
    await this.collectAxeResults();
    
    // Collect Pa11y results
    await this.collectPa11yResults();
    
    // Collect Lighthouse results
    await this.collectLighthouseResults();
    
    // Collect Playwright results
    await this.collectPlaywrightResults();
    
    // Collect Jest results
    await this.collectJestResults();
    
    // Collect comprehensive CI results
    await this.collectComprehensiveResults();
  }
  
  /**
   * Collect Axe test results
   */
  async collectAxeResults() {
    try {
      const axeFile = path.join(this.options.inputDir, `axe-results-${this.options.browser}.json`);
      const axeData = JSON.parse(await fs.readFile(axeFile, 'utf8'));
      
      this.reportData.toolResults.axe = {
        violations: axeData.violations || [],
        passes: axeData.passes || [],
        incomplete: axeData.incomplete || [],
        inapplicable: axeData.inapplicable || [],
        timestamp: axeData.timestamp,
        url: axeData.url
      };
      
      console.log(chalk.green(`✅ Collected Axe results: ${axeData.violations.length} violations`));
    } catch (error) {
      console.warn(chalk.yellow('⚠️ Could not collect Axe results:'), error.message);
      this.reportData.toolResults.axe = { error: error.message };
    }
  }
  
  /**
   * Collect Pa11y test results
   */
  async collectPa11yResults() {\n    try {\n      const pa11yFile = path.join(this.options.inputDir, `pa11y-results-${this.options.browser}.json`);\n      const pa11yData = JSON.parse(await fs.readFile(pa11yFile, 'utf8'));\n      \n      this.reportData.toolResults.pa11y = {\n        issues: pa11yData,\n        errors: pa11yData.filter(issue => issue.type === 'error'),\n        warnings: pa11yData.filter(issue => issue.type === 'warning'),\n        notices: pa11yData.filter(issue => issue.type === 'notice')\n      };\n      \n      console.log(chalk.green(`✅ Collected Pa11y results: ${pa11yData.length} issues`));\n    } catch (error) {\n      console.warn(chalk.yellow('⚠️ Could not collect Pa11y results:'), error.message);\n      this.reportData.toolResults.pa11y = { error: error.message };\n    }\n  }\n  \n  /**\n   * Collect Lighthouse test results\n   */\n  async collectLighthouseResults() {\n    try {\n      const lighthouseDir = path.join(this.options.inputDir, `lighthouse-${this.options.browser}`);\n      const files = await fs.readdir(lighthouseDir);\n      const manifestFile = files.find(f => f.includes('manifest'));\n      \n      if (manifestFile) {\n        const manifest = JSON.parse(await fs.readFile(path.join(lighthouseDir, manifestFile), 'utf8'));\n        const latestRun = manifest[0];\n        \n        if (latestRun && latestRun.jsonPath) {\n          const reportData = JSON.parse(await fs.readFile(path.join(lighthouseDir, latestRun.jsonPath), 'utf8'));\n          \n          this.reportData.toolResults.lighthouse = {\n            accessibilityScore: reportData.categories.accessibility.score * 100,\n            audits: reportData.audits,\n            accessibilityAudits: this.extractAccessibilityAudits(reportData.audits),\n            timestamp: reportData.fetchTime\n          };\n          \n          console.log(chalk.green(`✅ Collected Lighthouse results: ${this.reportData.toolResults.lighthouse.accessibilityScore}% score`));\n        }\n      }\n    } catch (error) {\n      console.warn(chalk.yellow('⚠️ Could not collect Lighthouse results:'), error.message);\n      this.reportData.toolResults.lighthouse = { error: error.message };\n    }\n  }\n  \n  /**\n   * Collect Playwright test results\n   */\n  async collectPlaywrightResults() {\n    try {\n      const playwrightFile = path.join(this.options.inputDir, `playwright-results-${this.options.browser}.json`);\n      const playwrightData = JSON.parse(await fs.readFile(playwrightFile, 'utf8'));\n      \n      this.reportData.toolResults.playwright = {\n        suites: playwrightData.suites || [],\n        stats: playwrightData.stats || {},\n        config: playwrightData.config || {},\n        errors: this.extractPlaywrightErrors(playwrightData.suites || [])\n      };\n      \n      console.log(chalk.green(`✅ Collected Playwright results: ${this.reportData.toolResults.playwright.stats.failed || 0} failed tests`));\n    } catch (error) {\n      console.warn(chalk.yellow('⚠️ Could not collect Playwright results:'), error.message);\n      this.reportData.toolResults.playwright = { error: error.message };\n    }\n  }\n  \n  /**\n   * Collect Jest test results\n   */\n  async collectJestResults() {\n    try {\n      const jestFile = path.join(this.options.inputDir, 'jest-results.json');\n      const jestData = JSON.parse(await fs.readFile(jestFile, 'utf8'));\n      \n      this.reportData.toolResults.jest = {\n        numTotalTests: jestData.numTotalTests || 0,\n        numPassedTests: jestData.numPassedTests || 0,\n        numFailedTests: jestData.numFailedTests || 0,\n        testResults: jestData.testResults || [],\n        failureMessages: this.extractJestFailures(jestData.testResults || [])\n      };\n      \n      console.log(chalk.green(`✅ Collected Jest results: ${this.reportData.toolResults.jest.numFailedTests} failed tests`));\n    } catch (error) {\n      console.warn(chalk.yellow('⚠️ Could not collect Jest results:'), error.message);\n      this.reportData.toolResults.jest = { error: error.message };\n    }\n  }\n  \n  /**\n   * Collect comprehensive CI results\n   */\n  async collectComprehensiveResults() {\n    try {\n      const comprehensiveFile = path.join(this.options.inputDir, `comprehensive-${this.options.browser}`, 'accessibility-report.json');\n      const comprehensiveData = JSON.parse(await fs.readFile(comprehensiveFile, 'utf8'));\n      \n      this.reportData.comprehensive = comprehensiveData;\n      \n      console.log(chalk.green(`✅ Collected comprehensive results: ${comprehensiveData.overallScore}% overall score`));\n    } catch (error) {\n      console.warn(chalk.yellow('⚠️ Could not collect comprehensive results:'), error.message);\n      this.reportData.comprehensive = { error: error.message };\n    }\n  }\n  \n  /**\n   * Process and analyze collected data\n   */\n  async processData() {\n    console.log(chalk.cyan('🔄 Processing accessibility data...'));\n    \n    // Set metadata\n    this.reportData.metadata = {\n      timestamp: new Date().toISOString(),\n      browser: this.options.browser,\n      generator: 'Accessibility Report Generator v1.0.0',\n      wcagLevel: 'AA',\n      toolsUsed: Object.keys(this.reportData.toolResults).filter(tool => !this.reportData.toolResults[tool].error)\n    };\n    \n    // Calculate summary statistics\n    this.reportData.summary = this.calculateSummary();\n    \n    // Consolidate issues from all tools\n    this.reportData.issues = this.consolidateIssues();\n    \n    // Generate recommendations\n    this.reportData.recommendations = this.generateRecommendations();\n    \n    // Calculate trends if historical data is available\n    if (this.options.includeTrends) {\n      this.reportData.trends = await this.calculateTrends();\n    }\n  }\n  \n  /**\n   * Calculate summary statistics\n   */\n  calculateSummary() {\n    const summary = {\n      overallScore: 0,\n      totalIssues: 0,\n      criticalIssues: 0,\n      seriousIssues: 0,\n      moderateIssues: 0,\n      minorIssues: 0,\n      toolScores: {},\n      complianceStatus: 'unknown'\n    };\n    \n    // Axe summary\n    if (this.reportData.toolResults.axe && !this.reportData.toolResults.axe.error) {\n      const axe = this.reportData.toolResults.axe;\n      summary.toolScores.axe = {\n        violations: axe.violations.length,\n        passes: axe.passes.length,\n        score: Math.max(0, 100 - (axe.violations.length * 10))\n      };\n      \n      // Count issues by severity\n      axe.violations.forEach(violation => {\n        summary.totalIssues++;\n        switch (violation.impact) {\n          case 'critical': summary.criticalIssues++; break;\n          case 'serious': summary.seriousIssues++; break;\n          case 'moderate': summary.moderateIssues++; break;\n          case 'minor': summary.minorIssues++; break;\n        }\n      });\n    }\n    \n    // Pa11y summary\n    if (this.reportData.toolResults.pa11y && !this.reportData.toolResults.pa11y.error) {\n      const pa11y = this.reportData.toolResults.pa11y;\n      summary.toolScores.pa11y = {\n        errors: pa11y.errors.length,\n        warnings: pa11y.warnings.length,\n        notices: pa11y.notices.length,\n        score: Math.max(0, 100 - (pa11y.errors.length * 15) - (pa11y.warnings.length * 5))\n      };\n    }\n    \n    // Lighthouse summary\n    if (this.reportData.toolResults.lighthouse && !this.reportData.toolResults.lighthouse.error) {\n      summary.toolScores.lighthouse = {\n        score: this.reportData.toolResults.lighthouse.accessibilityScore\n      };\n    }\n    \n    // Playwright summary\n    if (this.reportData.toolResults.playwright && !this.reportData.toolResults.playwright.error) {\n      const playwright = this.reportData.toolResults.playwright;\n      summary.toolScores.playwright = {\n        total: playwright.stats.total || 0,\n        passed: playwright.stats.passed || 0,\n        failed: playwright.stats.failed || 0,\n        score: playwright.stats.total > 0 ? (playwright.stats.passed / playwright.stats.total) * 100 : 100\n      };\n    }\n    \n    // Jest summary\n    if (this.reportData.toolResults.jest && !this.reportData.toolResults.jest.error) {\n      const jest = this.reportData.toolResults.jest;\n      summary.toolScores.jest = {\n        total: jest.numTotalTests,\n        passed: jest.numPassedTests,\n        failed: jest.numFailedTests,\n        score: jest.numTotalTests > 0 ? (jest.numPassedTests / jest.numTotalTests) * 100 : 100\n      };\n    }\n    \n    // Calculate overall score\n    const scores = Object.values(summary.toolScores)\n      .map(tool => tool.score)\n      .filter(score => typeof score === 'number');\n    \n    summary.overallScore = scores.length > 0 \n      ? Math.round(scores.reduce((a, b) => a + b, 0) / scores.length)\n      : 0;\n    \n    // Determine compliance status\n    if (summary.criticalIssues === 0 && summary.seriousIssues === 0 && summary.overallScore >= 90) {\n      summary.complianceStatus = 'excellent';\n    } else if (summary.criticalIssues === 0 && summary.seriousIssues <= 2 && summary.overallScore >= 80) {\n      summary.complianceStatus = 'good';\n    } else if (summary.criticalIssues <= 1 && summary.overallScore >= 70) {\n      summary.complianceStatus = 'fair';\n    } else {\n      summary.complianceStatus = 'poor';\n    }\n    \n    return summary;\n  }\n  \n  /**\n   * Consolidate issues from all tools\n   */\n  consolidateIssues() {\n    const issues = [];\n    \n    // Add Axe violations\n    if (this.reportData.toolResults.axe?.violations) {\n      this.reportData.toolResults.axe.violations.forEach(violation => {\n        issues.push({\n          tool: 'axe',\n          id: violation.id,\n          severity: violation.impact,\n          title: violation.help,\n          description: violation.description,\n          helpUrl: violation.helpUrl,\n          nodes: violation.nodes.length,\n          wcagTags: violation.tags.filter(tag => tag.startsWith('wcag')),\n          element: violation.nodes[0]?.target?.[0] || 'unknown'\n        });\n      });\n    }\n    \n    // Add Pa11y errors\n    if (this.reportData.toolResults.pa11y?.errors) {\n      this.reportData.toolResults.pa11y.errors.forEach(error => {\n        issues.push({\n          tool: 'pa11y',\n          id: error.code,\n          severity: 'error',\n          title: error.message,\n          description: error.message,\n          selector: error.selector,\n          context: error.context,\n          element: error.selector || 'unknown'\n        });\n      });\n    }\n    \n    // Add Lighthouse audit failures\n    if (this.reportData.toolResults.lighthouse?.audits) {\n      Object.entries(this.reportData.toolResults.lighthouse.audits)\n        .filter(([key, audit]) => audit.score !== null && audit.score < 1)\n        .forEach(([key, audit]) => {\n          issues.push({\n            tool: 'lighthouse',\n            id: key,\n            severity: audit.score < 0.5 ? 'serious' : 'moderate',\n            title: audit.title,\n            description: audit.description,\n            helpUrl: audit.helpUrl || audit.scoringOptions?.helpUrl,\n            element: 'page'\n          });\n        });\n    }\n    \n    // Sort by severity\n    const severityOrder = { critical: 4, serious: 3, error: 3, moderate: 2, minor: 1 };\n    issues.sort((a, b) => (severityOrder[b.severity] || 0) - (severityOrder[a.severity] || 0));\n    \n    return issues;\n  }\n  \n  /**\n   * Generate accessibility recommendations\n   */\n  generateRecommendations() {\n    const recommendations = [];\n    \n    // Analyze issue patterns\n    const issueTypes = this.reportData.issues.reduce((acc, issue) => {\n      acc[issue.id] = (acc[issue.id] || 0) + 1;\n      return acc;\n    }, {});\n    \n    // Generate recommendations based on common issues\n    Object.entries(issueTypes).forEach(([issueId, count]) => {\n      let recommendation = this.getRecommendationForIssue(issueId, count);\n      if (recommendation) {\n        recommendations.push(recommendation);\n      }\n    });\n    \n    // Add general recommendations based on overall score\n    if (this.reportData.summary.overallScore < 70) {\n      recommendations.unshift({\n        priority: 'critical',\n        category: 'Overall Accessibility',\n        title: 'Significant accessibility improvements needed',\n        description: `Your accessibility score of ${this.reportData.summary.overallScore}% indicates significant issues that need immediate attention.`,\n        actions: [\n          'Conduct a comprehensive accessibility audit',\n          'Implement accessibility testing in your development workflow',\n          'Consider hiring an accessibility consultant',\n          'Review WCAG 2.1 AA guidelines thoroughly'\n        ]\n      });\n    }\n    \n    return recommendations.slice(0, 10); // Limit to top 10 recommendations\n  }\n  \n  /**\n   * Get recommendation for specific issue type\n   */\n  getRecommendationForIssue(issueId, count) {\n    const recommendations = {\n      'color-contrast': {\n        priority: 'high',\n        category: 'Visual Design',\n        title: 'Improve color contrast',\n        description: `${count} color contrast issue(s) found. Text must have sufficient contrast against its background.`,\n        actions: [\n          'Use a color contrast checker tool',\n          'Ensure 4.5:1 ratio for normal text, 3:1 for large text',\n          'Test with different color blindness simulations',\n          'Consider high contrast mode compatibility'\n        ],\n        wcagReference: 'WCAG 2.1 AA 1.4.3 Contrast (Minimum)'\n      },\n      'image-alt': {\n        priority: 'high',\n        category: 'Content',\n        title: 'Add alternative text to images',\n        description: `${count} image(s) missing alternative text. All informative images need descriptive alt text.`,\n        actions: [\n          'Add meaningful alt attributes to all images',\n          'Use empty alt=\"\" for decorative images',\n          'Describe the content and function of images',\n          'Avoid redundant phrases like \"image of\" or \"picture of\"'\n        ],\n        wcagReference: 'WCAG 2.1 A 1.1.1 Non-text Content'\n      },\n      'heading-order': {\n        priority: 'medium',\n        category: 'Structure',\n        title: 'Fix heading hierarchy',\n        description: `${count} heading order issue(s) found. Headings should follow a logical sequence.`,\n        actions: [\n          'Use headings in sequential order (h1, h2, h3, etc.)',\n          'Don\\'t skip heading levels',\n          'Use only one h1 per page',\n          'Ensure headings describe the content that follows'\n        ],\n        wcagReference: 'WCAG 2.1 AA 1.3.1 Info and Relationships'\n      },\n      'keyboard': {\n        priority: 'high',\n        category: 'Interaction',\n        title: 'Improve keyboard accessibility',\n        description: `${count} keyboard accessibility issue(s) found. All interactive elements must be keyboard accessible.`,\n        actions: [\n          'Ensure all interactive elements are focusable',\n          'Provide visible focus indicators',\n          'Implement logical tab order',\n          'Test all functionality with keyboard only'\n        ],\n        wcagReference: 'WCAG 2.1 A 2.1.1 Keyboard'\n      },\n      'label': {\n        priority: 'high',\n        category: 'Forms',\n        title: 'Add labels to form controls',\n        description: `${count} form control(s) missing proper labels. All form inputs need accessible labels.`,\n        actions: [\n          'Associate labels with form controls using for/id',\n          'Use aria-label for buttons and inputs',\n          'Provide clear, descriptive labels',\n          'Group related form controls with fieldset/legend'\n        ],\n        wcagReference: 'WCAG 2.1 A 3.3.2 Labels or Instructions'\n      }\n    };\n    \n    return recommendations[issueId] || null;\n  }\n  \n  /**\n   * Calculate trends from historical data\n   */\n  async calculateTrends() {\n    // This would compare with previous test runs\n    // For now, return placeholder data\n    return {\n      scoreHistory: [],\n      issueHistory: [],\n      trend: 'stable'\n    };\n  }\n  \n  /**\n   * Generate reports in all requested formats\n   */\n  async generateReports() {\n    console.log(chalk.cyan('📝 Generating report files...'));\n    \n    for (const format of this.options.format) {\n      switch (format.toLowerCase()) {\n        case 'html':\n          await this.generateHTMLReport();\n          break;\n        case 'json':\n          await this.generateJSONReport();\n          break;\n        case 'markdown':\n          await this.generateMarkdownReport();\n          break;\n        case 'xml':\n          await this.generateXMLReport();\n          break;\n        default:\n          console.warn(chalk.yellow(`⚠️ Unknown format: ${format}`));\n      }\n    }\n  }\n  \n  /**\n   * Generate HTML report\n   */\n  async generateHTMLReport() {\n    const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Accessibility Report - ${this.options.browser}</title>\n    <style>\n        :root {\n            --primary: #007acc;\n            --success: #28a745;\n            --warning: #ffc107;\n            --danger: #dc3545;\n            --info: #17a2b8;\n            --light: #f8f9fa;\n            --dark: #343a40;\n        }\n        \n        * { box-sizing: border-box; }\n        \n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background: #f5f5f5;\n            color: #333;\n        }\n        \n        .container { max-width: 1200px; margin: 0 auto; }\n        \n        .header {\n            background: white;\n            padding: 30px;\n            border-radius: 8px;\n            margin-bottom: 20px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        \n        .score {\n            font-size: 3em;\n            font-weight: bold;\n            margin: 10px 0;\n            color: ${this.getScoreColor(this.reportData.summary.overallScore)};\n        }\n        \n        .status {\n            display: inline-block;\n            padding: 8px 16px;\n            border-radius: 20px;\n            font-weight: bold;\n            text-transform: uppercase;\n            font-size: 0.8em;\n            background: ${this.getStatusBackground(this.reportData.summary.complianceStatus)};\n            color: white;\n        }\n        \n        .grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 20px;\n            margin-bottom: 20px;\n        }\n        \n        .card {\n            background: white;\n            border-radius: 8px;\n            padding: 20px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        \n        .card h3 {\n            margin-top: 0;\n            color: var(--primary);\n            border-bottom: 2px solid var(--light);\n            padding-bottom: 10px;\n        }\n        \n        .metric {\n            display: flex;\n            justify-content: space-between;\n            margin: 10px 0;\n            padding: 10px;\n            background: var(--light);\n            border-radius: 4px;\n        }\n        \n        .issue {\n            margin: 15px 0;\n            padding: 15px;\n            border-left: 4px solid var(--danger);\n            background: #fff5f5;\n            border-radius: 0 4px 4px 0;\n        }\n        \n        .issue.serious { border-left-color: var(--warning); background: #fffbf0; }\n        .issue.moderate { border-left-color: var(--info); background: #f0f9ff; }\n        .issue.minor { border-left-color: #6c757d; background: #f8f9fa; }\n        \n        .recommendation {\n            margin: 15px 0;\n            padding: 15px;\n            border-left: 4px solid var(--info);\n            background: #f0f9ff;\n            border-radius: 0 4px 4px 0;\n        }\n        \n        .recommendation.high { border-left-color: var(--danger); background: #fff5f5; }\n        .recommendation.critical { border-left-color: var(--danger); background: #fff5f5; }\n        \n        table {\n            width: 100%;\n            border-collapse: collapse;\n            margin: 15px 0;\n        }\n        \n        th, td {\n            padding: 12px;\n            text-align: left;\n            border-bottom: 1px solid #ddd;\n        }\n        \n        th {\n            background-color: var(--light);\n            font-weight: 600;\n        }\n        \n        .actions {\n            margin-top: 10px;\n        }\n        \n        .actions li {\n            margin: 5px 0;\n        }\n        \n        .metadata {\n            background: var(--light);\n            padding: 15px;\n            border-radius: 4px;\n            font-size: 0.9em;\n            color: #666;\n        }\n        \n        @media (max-width: 768px) {\n            .grid { grid-template-columns: 1fr; }\n            .container { padding: 10px; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>Accessibility Report</h1>\n            <div class=\"score\">${this.reportData.summary.overallScore}%</div>\n            <p>Overall Accessibility Score</p>\n            <div class=\"status\">${this.reportData.summary.complianceStatus}</div>\n            <div class=\"metadata\">\n                <strong>Browser:</strong> ${this.reportData.metadata.browser} |\n                <strong>Generated:</strong> ${new Date(this.reportData.metadata.timestamp).toLocaleString()} |\n                <strong>Tools Used:</strong> ${this.reportData.metadata.toolsUsed.join(', ')}\n            </div>\n        </div>\n        \n        <div class=\"grid\">\n            <div class=\"card\">\n                <h3>Summary Statistics</h3>\n                <div class=\"metric\">\n                    <span>Total Issues</span>\n                    <strong>${this.reportData.summary.totalIssues}</strong>\n                </div>\n                <div class=\"metric\">\n                    <span>Critical Issues</span>\n                    <strong style=\"color: var(--danger)\">${this.reportData.summary.criticalIssues}</strong>\n                </div>\n                <div class=\"metric\">\n                    <span>Serious Issues</span>\n                    <strong style=\"color: var(--warning)\">${this.reportData.summary.seriousIssues}</strong>\n                </div>\n                <div class=\"metric\">\n                    <span>Moderate Issues</span>\n                    <strong style=\"color: var(--info)\">${this.reportData.summary.moderateIssues}</strong>\n                </div>\n                <div class=\"metric\">\n                    <span>Minor Issues</span>\n                    <strong>${this.reportData.summary.minorIssues}</strong>\n                </div>\n            </div>\n            \n            <div class=\"card\">\n                <h3>Tool Scores</h3>\n                <table>\n                    <thead>\n                        <tr><th>Tool</th><th>Score</th><th>Details</th></tr>\n                    </thead>\n                    <tbody>\n                        ${Object.entries(this.reportData.summary.toolScores).map(([tool, data]) => `\n                            <tr>\n                                <td style=\"text-transform: capitalize\">${tool}</td>\n                                <td><strong>${Math.round(data.score || 0)}%</strong></td>\n                                <td>${this.getToolDetails(tool, data)}</td>\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        \n        <div class=\"card\">\n            <h3>Critical Issues (${this.reportData.issues.filter(i => i.severity === 'critical' || i.severity === 'error').length})</h3>\n            ${this.reportData.issues\n                .filter(issue => issue.severity === 'critical' || issue.severity === 'error')\n                .slice(0, 10)\n                .map(issue => `\n                    <div class=\"issue ${issue.severity}\">\n                        <h4>${issue.title} <small>(${issue.tool})</small></h4>\n                        <p>${issue.description}</p>\n                        <p><strong>Element:</strong> <code>${issue.element}</code></p>\n                        ${issue.helpUrl ? `<p><a href=\"${issue.helpUrl}\" target=\"_blank\">Learn more →</a></p>` : ''}\n                    </div>\n                `).join('')}\n        </div>\n        \n        <div class=\"card\">\n            <h3>Recommendations (${this.reportData.recommendations.length})</h3>\n            ${this.reportData.recommendations.slice(0, 5).map(rec => `\n                <div class=\"recommendation ${rec.priority}\">\n                    <h4>${rec.title} <small>(${rec.category})</small></h4>\n                    <p>${rec.description}</p>\n                    ${rec.actions ? `\n                        <div class=\"actions\">\n                            <strong>Actions:</strong>\n                            <ul>\n                                ${rec.actions.map(action => `<li>${action}</li>`).join('')}\n                            </ul>\n                        </div>\n                    ` : ''}\n                    ${rec.wcagReference ? `<p><strong>WCAG Reference:</strong> ${rec.wcagReference}</p>` : ''}\n                </div>\n            `).join('')}\n        </div>\n        \n        ${this.options.includeDetails ? `\n            <div class=\"card\">\n                <h3>All Issues (${this.reportData.issues.length})</h3>\n                ${this.reportData.issues.map(issue => `\n                    <div class=\"issue ${issue.severity}\">\n                        <h4>${issue.title} <small>(${issue.tool} - ${issue.severity})</small></h4>\n                        <p>${issue.description}</p>\n                        <p><strong>Element:</strong> <code>${issue.element}</code></p>\n                        ${issue.helpUrl ? `<p><a href=\"${issue.helpUrl}\" target=\"_blank\">Learn more →</a></p>` : ''}\n                    </div>\n                `).join('')}\n            </div>\n        ` : ''}\n    </div>\n</body>\n</html>\n    `;\n    \n    await fs.writeFile(\n      path.join(this.options.outputDir, `accessibility-report-${this.options.browser}.html`),\n      html\n    );\n    \n    console.log(chalk.green('✅ HTML report generated'));\n  }\n  \n  /**\n   * Generate JSON report\n   */\n  async generateJSONReport() {\n    await fs.writeFile(\n      path.join(this.options.outputDir, `accessibility-report-${this.options.browser}.json`),\n      JSON.stringify(this.reportData, null, 2)\n    );\n    \n    console.log(chalk.green('✅ JSON report generated'));\n  }\n  \n  /**\n   * Generate Markdown report\n   */\n  async generateMarkdownReport() {\n    const markdown = `\n# Accessibility Report - ${this.options.browser}\n\n**Overall Score:** ${this.reportData.summary.overallScore}%  \n**Status:** ${this.reportData.summary.complianceStatus}  \n**Generated:** ${new Date(this.reportData.metadata.timestamp).toLocaleString()}  \n**Browser:** ${this.reportData.metadata.browser}  \n**Tools Used:** ${this.reportData.metadata.toolsUsed.join(', ')}  \n\n## Summary\n\n| Metric | Count |\n|-----------|-------|\n| Total Issues | ${this.reportData.summary.totalIssues} |\n| Critical Issues | ${this.reportData.summary.criticalIssues} |\n| Serious Issues | ${this.reportData.summary.seriousIssues} |\n| Moderate Issues | ${this.reportData.summary.moderateIssues} |\n| Minor Issues | ${this.reportData.summary.minorIssues} |\n\n## Tool Scores\n\n| Tool | Score | Details |\n|------|-------|----------|\n${Object.entries(this.reportData.summary.toolScores).map(([tool, data]) => \n  `| ${tool} | ${Math.round(data.score || 0)}% | ${this.getToolDetails(tool, data)} |`\n).join('\\n')}\n\n## Critical Issues\n\n${this.reportData.issues\n  .filter(issue => issue.severity === 'critical' || issue.severity === 'error')\n  .slice(0, 10)\n  .map((issue, index) => `\n### ${index + 1}. ${issue.title} (${issue.tool})\n\n**Severity:** ${issue.severity}  \n**Description:** ${issue.description}  \n**Element:** \`${issue.element}\`  \n${issue.helpUrl ? `**Learn more:** [${issue.helpUrl}](${issue.helpUrl})` : ''}\n`).join('\\n')}\n\n## Recommendations\n\n${this.reportData.recommendations.slice(0, 5).map((rec, index) => `\n### ${index + 1}. ${rec.title}\n\n**Category:** ${rec.category}  \n**Priority:** ${rec.priority}  \n**Description:** ${rec.description}  \n\n${rec.actions ? `**Actions:**\\n${rec.actions.map(action => `- ${action}`).join('\\n')}\\n` : ''}\n${rec.wcagReference ? `**WCAG Reference:** ${rec.wcagReference}\\n` : ''}\n`).join('\\n')}\n\n---\n*Generated by Accessibility Report Generator*\n    `;\n    \n    await fs.writeFile(\n      path.join(this.options.outputDir, `accessibility-report-${this.options.browser}.md`),\n      markdown\n    );\n    \n    console.log(chalk.green('✅ Markdown report generated'));\n  }\n  \n  /**\n   * Generate XML report (JUnit format for CI integration)\n   */\n  async generateXMLReport() {\n    const xml = `\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuite \n    name=\"Accessibility Tests\" \n    tests=\"${this.reportData.issues.length}\" \n    failures=\"${this.reportData.summary.criticalIssues + this.reportData.summary.seriousIssues}\" \n    errors=\"0\" \n    time=\"0\"\n    timestamp=\"${this.reportData.metadata.timestamp}\">\n    \n    ${this.reportData.issues.map(issue => `\n    <testcase classname=\"${issue.tool}\" name=\"${issue.id}\" time=\"0\">\n        ${(issue.severity === 'critical' || issue.severity === 'error') ? `\n        <failure message=\"${this.escapeXml(issue.title)}\">\n            ${this.escapeXml(issue.description)}\n            Element: ${this.escapeXml(issue.element)}\n            ${issue.helpUrl ? `Help: ${issue.helpUrl}` : ''}\n        </failure>\n        ` : ''}\n    </testcase>\n    `).join('')}\n    \n    <system-out>\n        Overall Score: ${this.reportData.summary.overallScore}%\n        Compliance Status: ${this.reportData.summary.complianceStatus}\n        Browser: ${this.reportData.metadata.browser}\n        Tools Used: ${this.reportData.metadata.toolsUsed.join(', ')}\n    </system-out>\n</testsuite>\n    `;\n    \n    await fs.writeFile(\n      path.join(this.options.outputDir, `accessibility-report-${this.options.browser}.xml`),\n      xml\n    );\n    \n    console.log(chalk.green('✅ XML report generated'));\n  }\n  \n  // Helper methods\n  getScoreColor(score) {\n    if (score >= 90) return '#28a745';\n    if (score >= 80) return '#ffc107';\n    if (score >= 70) return '#fd7e14';\n    return '#dc3545';\n  }\n  \n  getStatusBackground(status) {\n    switch (status) {\n      case 'excellent': return '#28a745';\n      case 'good': return '#17a2b8';\n      case 'fair': return '#ffc107';\n      case 'poor': return '#dc3545';\n      default: return '#6c757d';\n    }\n  }\n  \n  getToolDetails(tool, data) {\n    switch (tool) {\n      case 'axe':\n        return `${data.violations || 0} violations, ${data.passes || 0} passes`;\n      case 'pa11y':\n        return `${data.errors || 0} errors, ${data.warnings || 0} warnings`;\n      case 'lighthouse':\n        return `Accessibility audit`;\n      case 'playwright':\n        return `${data.failed || 0}/${data.total || 0} tests failed`;\n      case 'jest':\n        return `${data.failed || 0}/${data.total || 0} tests failed`;\n      default:\n        return 'N/A';\n    }\n  }\n  \n  extractAccessibilityAudits(audits) {\n    const accessibilityAudits = {};\n    const accessibilityAuditIds = [\n      'accesskeys', 'aria-allowed-attr', 'aria-command-name', 'aria-hidden-body',\n      'aria-hidden-focus', 'aria-input-field-name', 'aria-required-attr',\n      'aria-required-children', 'aria-required-parent', 'aria-roles',\n      'aria-valid-attr-value', 'aria-valid-attr', 'button-name', 'bypass',\n      'color-contrast', 'definition-list', 'dlitem', 'document-title',\n      'duplicate-id-active', 'duplicate-id-aria', 'form-field-multiple-labels',\n      'frame-title', 'heading-order', 'html-has-lang', 'html-lang-valid',\n      'image-alt', 'input-image-alt', 'label', 'landmark-one-main',\n      'link-name', 'list', 'listitem', 'meta-refresh', 'meta-viewport',\n      'object-alt', 'tabindex', 'td-headers-attr', 'th-has-data-cells',\n      'valid-lang', 'video-caption'\n    ];\n    \n    accessibilityAuditIds.forEach(id => {\n      if (audits[id]) {\n        accessibilityAudits[id] = audits[id];\n      }\n    });\n    \n    return accessibilityAudits;\n  }\n  \n  extractPlaywrightErrors(suites) {\n    const errors = [];\n    \n    const extractFromSuite = (suite) => {\n      if (suite.specs) {\n        suite.specs.forEach(spec => {\n          if (spec.tests) {\n            spec.tests.forEach(test => {\n              if (test.results) {\n                test.results.forEach(result => {\n                  if (result.status === 'failed' && result.error) {\n                    errors.push({\n                      title: test.title,\n                      error: result.error.message,\n                      file: spec.file\n                    });\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n      \n      if (suite.suites) {\n        suite.suites.forEach(extractFromSuite);\n      }\n    };\n    \n    suites.forEach(extractFromSuite);\n    return errors;\n  }\n  \n  extractJestFailures(testResults) {\n    const failures = [];\n    \n    testResults.forEach(result => {\n      if (result.status === 'failed' && result.failureMessages) {\n        result.failureMessages.forEach(message => {\n          failures.push({\n            testFile: result.name,\n            message: message\n          });\n        });\n      }\n    });\n    \n    return failures;\n  }\n  \n  escapeXml(text) {\n    return text\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&apos;');\n  }\n}\n\n// CLI interface\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  const options = {};\n  \n  // Parse command line arguments\n  for (let i = 0; i < args.length; i += 2) {\n    const key = args[i].replace(/^--/, '');\n    const value = args[i + 1];\n    \n    if (value === 'true') options[key] = true;\n    else if (value === 'false') options[key] = false;\n    else options[key] = value;\n  }\n  \n  const generator = new AccessibilityReportGenerator(options);\n  generator.generate().catch(console.error);\n}\n\nmodule.exports = AccessibilityReportGenerator;"