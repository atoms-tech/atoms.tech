name: Layered Deploy Workflow

on:
  workflow_dispatch:
    inputs:
      feature_branch:
        description: 'Feature branch to deploy (e.g., fix/password-reset)'
        required: true
        type: string
      deploy_to_production:
        description: 'Deploy to production after merging to main'
        required: true
        type: boolean
        default: true
      pr_title:
        description: 'PR title (optional)'
        required: false
        type: string
      pr_body:
        description: 'PR body (optional)'
        required: false
        type: string

jobs:
  layered-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      deployments: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Validate feature branch exists
        run: |
          if ! git show-ref --verify --quiet refs/remotes/origin/${{ inputs.feature_branch }}; then
            echo "❌ Feature branch '${{ inputs.feature_branch }}' does not exist on remote"
            exit 1
          fi
          echo "✅ Feature branch '${{ inputs.feature_branch }}' exists"

      - name: Checkout feature branch
        run: |
          git fetch origin ${{ inputs.feature_branch }}
          git checkout ${{ inputs.feature_branch }}
          git pull origin ${{ inputs.feature_branch }}

      - name: Create PR to main
        id: pr-to-main
        run: |
          # Generate PR title if not provided
          PR_TITLE="${{ inputs.pr_title }}"
          if [ -z "$PR_TITLE" ]; then
            PR_TITLE="Deploy: $(git log -1 --pretty=format:'%s')"
          fi
          
          # Generate PR body if not provided
          PR_BODY="${{ inputs.pr_body }}"
          if [ -z "$PR_BODY" ]; then
            PR_BODY="## Automated Deployment
          
          This PR was created by the Layered Deploy Workflow.
          
          ### Changes
          $(git log --oneline -10)
          
          ### Verification
          - [x] Feature branch validated
          - [x] Ready for merge to main
          
          Ready for review and merge! 🚀"
          fi
          
          # Create PR
          PR_URL=$(gh pr create \
            --base main \
            --head ${{ inputs.feature_branch }} \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --assignee @me)
          
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "✅ Created PR to main: $PR_URL"

      - name: Wait for PR approval (if required)
        if: github.event.inputs.auto_merge != 'true'
        run: |
          echo "⏳ Waiting for PR approval..."
          echo "PR URL: ${{ steps.pr-to-main.outputs.pr_url }}"
          echo "Please review and merge the PR manually, then the workflow will continue."

      - name: Auto-merge PR to main
        if: github.event.inputs.auto_merge == 'true'
        run: |
          echo "🔄 Auto-merging PR to main..."
          gh pr merge ${{ steps.pr-to-main.outputs.pr_url }} --merge --delete-branch
          echo "✅ PR merged to main"

      - name: Fast-forward merge to main
        run: |
          git checkout main
          git pull origin main
          git merge --ff-only ${{ inputs.feature_branch }}
          git push origin main
          echo "✅ Fast-forward merged to main"

      - name: Create PR to production
        if: inputs.deploy_to_production == 'true'
        id: pr-to-production
        run: |
          # Generate PR title for production
          PROD_PR_TITLE="Deploy: $(git log -1 --pretty=format:'%s')"
          
          # Generate PR body for production
          PROD_PR_BODY="## Production Deployment
          
          This PR deploys the latest changes from main to production.
          
          ### Changes
          $(git log --oneline -10)
          
          ### Verification
          - [x] Changes merged to main
          - [x] Ready for production deployment
          
          Ready for production! 🚀"
          
          # Create PR to production
          PROD_PR_URL=$(gh pr create \
            --base production \
            --head main \
            --title "$PROD_PR_TITLE" \
            --body "$PROD_PR_BODY" \
            --assignee @me)
          
          echo "prod_pr_url=$PROD_PR_URL" >> $GITHUB_OUTPUT
          echo "✅ Created PR to production: $PROD_PR_URL"

      - name: Fast-forward merge to production
        if: inputs.deploy_to_production == 'true'
        run: |
          git checkout production
          git pull origin production
          git merge --ff-only main
          git push origin production
          echo "✅ Fast-forward merged to production"

      - name: Deploy to Vercel
        if: inputs.deploy_to_production == 'true'
        run: |
          echo "🚀 Deploying to Vercel production..."
          # Note: This would require Vercel CLI and proper authentication
          # For now, we'll just echo the command
          echo "Run: vercel --prod"
          echo "✅ Deployment command ready"

      - name: Cleanup
        run: |
          echo "🧹 Cleaning up..."
          # Close any remaining PRs if they were auto-merged
          if [ "${{ github.event.inputs.auto_merge }}" == "true" ]; then
            gh pr close ${{ steps.pr-to-main.outputs.pr_url }} || true
            if [ "${{ inputs.deploy_to_production }}" == "true" ]; then
              gh pr close ${{ steps.pr-to-production.outputs.prod_pr_url }} || true
            fi
          fi
          echo "✅ Cleanup complete"

      - name: Summary
        run: |
          echo "## 🎉 Layered Deploy Complete!"
          echo ""
          echo "### 📋 Summary:"
          echo "- ✅ Feature branch: ${{ inputs.feature_branch }}"
          echo "- ✅ Merged to main"
          if [ "${{ inputs.deploy_to_production }}" == "true" ]; then
            echo "- ✅ Merged to production"
            echo "- ✅ Deployed to Vercel"
          fi
          echo ""
          echo "### 🔗 PRs Created:"
          echo "- Main PR: ${{ steps.pr-to-main.outputs.pr_url }}"
          if [ "${{ inputs.deploy_to_production }}" == "true" ]; then
            echo "- Production PR: ${{ steps.pr-to-production.outputs.prod_pr_url }}"
          fi